
lggg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000310e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00800060  0000310e  000031a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008001f6  008001f6  00003338  2**0
                  ALLOC
  3 .stab         000027fc  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000159b  00000000  00000000  00005b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000070cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000726f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007461  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000986c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000abf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bdc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cbec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3f       	cpi	r26, 0xF8	; 248
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <main>
      8a:	0c 94 85 18 	jmp	0x310a	; 0x310a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad eb       	ldi	r26, 0xBD	; 189
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d eb       	ldi	r24, 0xBD	; 189
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d eb       	ldi	r22, 0xBD	; 189
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 53       	subi	r30, 0x3B	; 59
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DcMotorR_Init>:
#include <util/delay.h>

#include "Pwm.h"

void DcMotorR_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/* !Comment: Initialize the DC Motor direction selection Pins */
	Dio_ChannelDirectionSet(DC_MOTOR_R_DIR_REG, DC_MOTOR_R_IN1_PIN, DIO_OUTPUT);
     e36:	84 e3       	ldi	r24, 0x34	; 52
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	65 e0       	ldi	r22, 0x05	; 5
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(DC_MOTOR_R_DIR_REG, DC_MOTOR_R_IN2_PIN, DIO_OUTPUT);
     e42:	84 e3       	ldi	r24, 0x34	; 52
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	66 e0       	ldi	r22, 0x06	; 6
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(DC_MOTOR_R_EN_DIR_REG, DC_MOTOR_R_EN_PIN, DIO_OUTPUT);
     e4e:	81 e3       	ldi	r24, 0x31	; 49
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	65 e0       	ldi	r22, 0x05	; 5
     e54:	41 e0       	ldi	r20, 0x01	; 1
     e56:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Dio_ChannelDirectionSet>
	/* !Comment: Initialize PWM module */
	Pwm_Init(&gStrPwm_Configuration[PWM_CHANNEL_1]);
     e5a:	8f ec       	ldi	r24, 0xCF	; 207
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 42 14 	call	0x2884	; 0x2884 <Pwm_Init>
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <DcMotorR_Control>:
void DcMotorR_Control(DcMotor_RotationDirType Dir, DcMotor_SpeedType Speed)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DcMotorR_Control+0x6>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <DcMotorR_Control+0x8>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <DcMotorR_Control+0xa>
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	6a 83       	std	Y+2, r22	; 0x02
	switch(Dir)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	3e 83       	std	Y+6, r19	; 0x06
     e82:	2d 83       	std	Y+5, r18	; 0x05
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	31 f0       	breq	.+12     	; 0xe98 <DcMotorR_Control+0x30>
     e8c:	2d 81       	ldd	r18, Y+5	; 0x05
     e8e:	3e 81       	ldd	r19, Y+6	; 0x06
     e90:	21 30       	cpi	r18, 0x01	; 1
     e92:	31 05       	cpc	r19, r1
     e94:	71 f0       	breq	.+28     	; 0xeb2 <DcMotorR_Control+0x4a>
     e96:	19 c0       	rjmp	.+50     	; 0xeca <DcMotorR_Control+0x62>
	{
	case DC_MOTOR_TURN_CW:
		Dio_ChannelWrite(DC_MOTOR_R_OUT_REG, DC_MOTOR_R_IN1_PIN, DIO_HIGH);
     e98:	85 e3       	ldi	r24, 0x35	; 53
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	65 e0       	ldi	r22, 0x05	; 5
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
		Dio_ChannelWrite(DC_MOTOR_R_OUT_REG, DC_MOTOR_R_IN2_PIN, DIO_LOW);
     ea4:	85 e3       	ldi	r24, 0x35	; 53
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	66 e0       	ldi	r22, 0x06	; 6
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
     eb0:	0c c0       	rjmp	.+24     	; 0xeca <DcMotorR_Control+0x62>
		break;
	case DC_MOTOR_TURN_CCW:
		Dio_ChannelWrite(DC_MOTOR_R_OUT_REG, DC_MOTOR_R_IN1_PIN, DIO_LOW);
     eb2:	85 e3       	ldi	r24, 0x35	; 53
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	65 e0       	ldi	r22, 0x05	; 5
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
		Dio_ChannelWrite(DC_MOTOR_R_OUT_REG, DC_MOTOR_R_IN2_PIN, DIO_HIGH);
     ebe:	85 e3       	ldi	r24, 0x35	; 53
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	66 e0       	ldi	r22, 0x06	; 6
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
		break;
	default:
		break;
	}
	switch(Speed)
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	3c 83       	std	Y+4, r19	; 0x04
     ed2:	2b 83       	std	Y+3, r18	; 0x03
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	91 05       	cpc	r25, r1
     edc:	79 f0       	breq	.+30     	; 0xefc <DcMotorR_Control+0x94>
     ede:	2b 81       	ldd	r18, Y+3	; 0x03
     ee0:	3c 81       	ldd	r19, Y+4	; 0x04
     ee2:	22 30       	cpi	r18, 0x02	; 2
     ee4:	31 05       	cpc	r19, r1
     ee6:	81 f0       	breq	.+32     	; 0xf08 <DcMotorR_Control+0xa0>
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	89 f4       	brne	.+34     	; 0xf12 <DcMotorR_Control+0xaa>
	{
	case DC_MOTOR_SPEED_LOW:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 20U);
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	64 e1       	ldi	r22, 0x14	; 20
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Pwm_SetDutyCycle>
     efa:	0b c0       	rjmp	.+22     	; 0xf12 <DcMotorR_Control+0xaa>
		break;
	case DC_MOTOR_SPEED_MID:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 50U);
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	62 e3       	ldi	r22, 0x32	; 50
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Pwm_SetDutyCycle>
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <DcMotorR_Control+0xaa>
		break;
	case DC_MOTOR_SPEED_HIGH:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 90U);
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	6a e5       	ldi	r22, 0x5A	; 90
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Pwm_SetDutyCycle>
		break;
	default:
		break;
	}
}
     f12:	26 96       	adiw	r28, 0x06	; 6
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <DcMotorL_Init>:

void DcMotorL_Init(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	/* !Comment: Initialize the DC Motor direction selection Pins */
	Dio_ChannelDirectionSet(DC_MOTOR_L_DIR_REG, DC_MOTOR_L_IN1_PIN, DIO_OUTPUT);
     f2c:	84 e3       	ldi	r24, 0x34	; 52
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	63 e0       	ldi	r22, 0x03	; 3
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(DC_MOTOR_L_DIR_REG, DC_MOTOR_L_IN2_PIN, DIO_OUTPUT);
     f38:	84 e3       	ldi	r24, 0x34	; 52
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	64 e0       	ldi	r22, 0x04	; 4
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(DC_MOTOR_L_EN_DIR_REG, DC_MOTOR_L_EN_PIN, DIO_OUTPUT);
     f44:	81 e3       	ldi	r24, 0x31	; 49
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	64 e0       	ldi	r22, 0x04	; 4
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Dio_ChannelDirectionSet>
	/* !Comment: Initialize PWM module */
	Pwm_Init(&gStrPwm_Configuration[PWM_CHANNEL_1]);
     f50:	8f ec       	ldi	r24, 0xCF	; 207
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	0e 94 42 14 	call	0x2884	; 0x2884 <Pwm_Init>
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <DcMotorL_Control>:
void DcMotorL_Control(DcMotor_RotationDirType Dir, DcMotor_SpeedType Speed)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <DcMotorL_Control+0x6>
     f64:	00 d0       	rcall	.+0      	; 0xf66 <DcMotorL_Control+0x8>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <DcMotorL_Control+0xa>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Dir)
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3e 83       	std	Y+6, r19	; 0x06
     f78:	2d 83       	std	Y+5, r18	; 0x05
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	31 f0       	breq	.+12     	; 0xf8e <DcMotorL_Control+0x30>
     f82:	2d 81       	ldd	r18, Y+5	; 0x05
     f84:	3e 81       	ldd	r19, Y+6	; 0x06
     f86:	21 30       	cpi	r18, 0x01	; 1
     f88:	31 05       	cpc	r19, r1
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <DcMotorL_Control+0x4a>
     f8c:	19 c0       	rjmp	.+50     	; 0xfc0 <DcMotorL_Control+0x62>
	{
	case DC_MOTOR_TURN_CW:
		Dio_ChannelWrite(DC_MOTOR_L_OUT_REG, DC_MOTOR_L_IN1_PIN, DIO_HIGH);
     f8e:	85 e3       	ldi	r24, 0x35	; 53
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	63 e0       	ldi	r22, 0x03	; 3
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
		Dio_ChannelWrite(DC_MOTOR_L_OUT_REG, DC_MOTOR_L_IN2_PIN, DIO_LOW);
     f9a:	85 e3       	ldi	r24, 0x35	; 53
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	64 e0       	ldi	r22, 0x04	; 4
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
     fa6:	0c c0       	rjmp	.+24     	; 0xfc0 <DcMotorL_Control+0x62>
		break;
	case DC_MOTOR_TURN_CCW:
		Dio_ChannelWrite(DC_MOTOR_L_OUT_REG, DC_MOTOR_L_IN1_PIN, DIO_LOW);
     fa8:	85 e3       	ldi	r24, 0x35	; 53
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	63 e0       	ldi	r22, 0x03	; 3
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
		Dio_ChannelWrite(DC_MOTOR_L_OUT_REG, DC_MOTOR_L_IN2_PIN, DIO_HIGH);
     fb4:	85 e3       	ldi	r24, 0x35	; 53
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	64 e0       	ldi	r22, 0x04	; 4
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
		break;
	default:
		break;
	}
	switch(Speed)
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3c 83       	std	Y+4, r19	; 0x04
     fc8:	2b 83       	std	Y+3, r18	; 0x03
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	79 f0       	breq	.+30     	; 0xff2 <DcMotorL_Control+0x94>
     fd4:	2b 81       	ldd	r18, Y+3	; 0x03
     fd6:	3c 81       	ldd	r19, Y+4	; 0x04
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	81 f0       	breq	.+32     	; 0xffe <DcMotorL_Control+0xa0>
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	89 f4       	brne	.+34     	; 0x1008 <DcMotorL_Control+0xaa>
	{
	case DC_MOTOR_SPEED_LOW:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 20U);
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	64 e1       	ldi	r22, 0x14	; 20
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Pwm_SetDutyCycle>
     ff0:	0b c0       	rjmp	.+22     	; 0x1008 <DcMotorL_Control+0xaa>
		break;
	case DC_MOTOR_SPEED_MID:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 50U);
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	62 e3       	ldi	r22, 0x32	; 50
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Pwm_SetDutyCycle>
     ffc:	05 c0       	rjmp	.+10     	; 0x1008 <DcMotorL_Control+0xaa>
		break;
	case DC_MOTOR_SPEED_HIGH:
		Pwm_SetDutyCycle(PWM_CHANNEL_1, 90U);
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	6a e5       	ldi	r22, 0x5A	; 90
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Pwm_SetDutyCycle>
		break;
	default:
		break;
	}
}
    1008:	26 96       	adiw	r28, 0x06	; 6
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <Forward>:

void Forward(void)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	DcMotorR_Control(DC_MOTOR_TURN_CW, DC_MOTOR_SPEED_MID);
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	0e 94 34 07 	call	0xe68	; 0xe68 <DcMotorR_Control>
	DcMotorL_Control(DC_MOTOR_TURN_CW, DC_MOTOR_SPEED_MID);
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	0e 94 af 07 	call	0xf5e	; 0xf5e <DcMotorL_Control>
	LCD_Clear();
    1032:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_Clear>
	LCD_RowCol_Select(0,0);
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_RowCol_Select>
	LCD_StringDisplay("Moving Forward");
    103e:	80 e6       	ldi	r24, 0x60	; 96
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_StringDisplay>


}
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <Backward>:
void Backward(void)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
	DcMotorR_Control(DC_MOTOR_TURN_CCW, DC_MOTOR_SPEED_MID);
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	0e 94 34 07 	call	0xe68	; 0xe68 <DcMotorR_Control>
	DcMotorL_Control(DC_MOTOR_TURN_CCW, DC_MOTOR_SPEED_MID);
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	0e 94 af 07 	call	0xf5e	; 0xf5e <DcMotorL_Control>
	LCD_Clear();
    1064:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_Clear>
	LCD_RowCol_Select(0,0);
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_RowCol_Select>
	LCD_StringDisplay("Moving Backward");
    1070:	8f e6       	ldi	r24, 0x6F	; 111
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_StringDisplay>

}
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <Left>:
void Left(void)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
	DcMotorR_Control(DC_MOTOR_TURN_CW, DC_MOTOR_SPEED_MID);
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	0e 94 34 07 	call	0xe68	; 0xe68 <DcMotorR_Control>
	DcMotorL_Control(DC_MOTOR_TURN_CCW, DC_MOTOR_SPEED_MID);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	0e 94 af 07 	call	0xf5e	; 0xf5e <DcMotorL_Control>


}
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <Right>:
void Right(void)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	DcMotorR_Control(DC_MOTOR_TURN_CCW, DC_MOTOR_SPEED_MID);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	0e 94 34 07 	call	0xe68	; 0xe68 <DcMotorR_Control>
	DcMotorL_Control(DC_MOTOR_TURN_CW, DC_MOTOR_SPEED_MID);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	0e 94 af 07 	call	0xf5e	; 0xf5e <DcMotorL_Control>


}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <Dio_ChannelDirectionSet>:
#include "Macros.h"
#include "Std_Types.h"
#include "ATmega32_Cfg.h"

void Dio_ChannelDirectionSet(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinDirectionEnum_t Direction)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <Dio_ChannelDirectionSet+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <Dio_ChannelDirectionSet+0x8>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <Dio_ChannelDirectionSet+0xa>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	6b 83       	std	Y+3, r22	; 0x03
    10ce:	4c 83       	std	Y+4, r20	; 0x04

	switch(Direction)
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	3e 83       	std	Y+6, r19	; 0x06
    10d8:	2d 83       	std	Y+5, r18	; 0x05
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	9e 81       	ldd	r25, Y+6	; 0x06
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	31 f0       	breq	.+12     	; 0x10ee <Dio_ChannelDirectionSet+0x34>
    10e2:	2d 81       	ldd	r18, Y+5	; 0x05
    10e4:	3e 81       	ldd	r19, Y+6	; 0x06
    10e6:	21 30       	cpi	r18, 0x01	; 1
    10e8:	31 05       	cpc	r19, r1
    10ea:	a9 f0       	breq	.+42     	; 0x1116 <Dio_ChannelDirectionSet+0x5c>
    10ec:	26 c0       	rjmp	.+76     	; 0x113a <Dio_ChannelDirectionSet+0x80>
	{
		case DIO_INPUT:
		CLEAR_BIT(*Port_reg,Channel);
    10ee:	e9 81       	ldd	r30, Y+1	; 0x01
    10f0:	fa 81       	ldd	r31, Y+2	; 0x02
    10f2:	40 81       	ld	r20, Z
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <Dio_ChannelDirectionSet+0x4c>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <Dio_ChannelDirectionSet+0x48>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	e9 81       	ldd	r30, Y+1	; 0x01
    1110:	fa 81       	ldd	r31, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	12 c0       	rjmp	.+36     	; 0x113a <Dio_ChannelDirectionSet+0x80>
		break;
		case DIO_OUTPUT:
		SET_BIT(*Port_reg,Channel);
    1116:	e9 81       	ldd	r30, Y+1	; 0x01
    1118:	fa 81       	ldd	r31, Y+2	; 0x02
    111a:	40 81       	ld	r20, Z
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <Dio_ChannelDirectionSet+0x74>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <Dio_ChannelDirectionSet+0x70>
    1132:	84 2b       	or	r24, r20
    1134:	e9 81       	ldd	r30, Y+1	; 0x01
    1136:	fa 81       	ldd	r31, Y+2	; 0x02
    1138:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
}
    113a:	26 96       	adiw	r28, 0x06	; 6
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <Dio_ChannelRead>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <Dio_ChannelRead+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <Dio_ChannelRead+0x8>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9b 83       	std	Y+3, r25	; 0x03
    115a:	8a 83       	std	Y+2, r24	; 0x02
    115c:	6c 83       	std	Y+4, r22	; 0x04
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
    115e:	ea 81       	ldd	r30, Y+2	; 0x02
    1160:	fb 81       	ldd	r31, Y+3	; 0x03
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <Dio_ChannelRead+0x2c>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	2a 95       	dec	r18
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <Dio_ChannelRead+0x28>
    117c:	9a 01       	movw	r18, r20
    117e:	28 23       	and	r18, r24
    1180:	39 23       	and	r19, r25
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <Dio_ChannelRead+0x44>
    118c:	56 95       	lsr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <Dio_ChannelRead+0x40>
    1194:	ca 01       	movw	r24, r20
    1196:	89 83       	std	Y+1, r24	; 0x01
	return (u8LocalPinValue);
    1198:	89 81       	ldd	r24, Y+1	; 0x01
}
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <Dio_ChannelWrite+0x6>
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <Dio_ChannelWrite+0x8>
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <Dio_ChannelWrite+0xa>
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	6b 83       	std	Y+3, r22	; 0x03
    11bc:	4c 83       	std	Y+4, r20	; 0x04
	switch(State)
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3e 83       	std	Y+6, r19	; 0x06
    11c6:	2d 83       	std	Y+5, r18	; 0x05
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	9e 81       	ldd	r25, Y+6	; 0x06
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	31 f0       	breq	.+12     	; 0x11dc <Dio_ChannelWrite+0x34>
    11d0:	2d 81       	ldd	r18, Y+5	; 0x05
    11d2:	3e 81       	ldd	r19, Y+6	; 0x06
    11d4:	21 30       	cpi	r18, 0x01	; 1
    11d6:	31 05       	cpc	r19, r1
    11d8:	a9 f0       	breq	.+42     	; 0x1204 <Dio_ChannelWrite+0x5c>
    11da:	26 c0       	rjmp	.+76     	; 0x1228 <Dio_ChannelWrite+0x80>
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
    11dc:	e9 81       	ldd	r30, Y+1	; 0x01
    11de:	fa 81       	ldd	r31, Y+2	; 0x02
    11e0:	40 81       	ld	r20, Z
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <Dio_ChannelWrite+0x4c>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <Dio_ChannelWrite+0x48>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	e9 81       	ldd	r30, Y+1	; 0x01
    11fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1200:	80 83       	st	Z, r24
    1202:	12 c0       	rjmp	.+36     	; 0x1228 <Dio_ChannelWrite+0x80>
		break;
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
    1204:	e9 81       	ldd	r30, Y+1	; 0x01
    1206:	fa 81       	ldd	r31, Y+2	; 0x02
    1208:	40 81       	ld	r20, Z
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <Dio_ChannelWrite+0x74>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <Dio_ChannelWrite+0x70>
    1220:	84 2b       	or	r24, r20
    1222:	e9 81       	ldd	r30, Y+1	; 0x01
    1224:	fa 81       	ldd	r31, Y+2	; 0x02
    1226:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
}
    1228:	26 96       	adiw	r28, 0x06	; 6
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <Dio_ChannelToggle>:
void Dio_ChannelToggle(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <Dio_ChannelToggle+0x6>
    1240:	0f 92       	push	r0
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	6b 83       	std	Y+3, r22	; 0x03
	TOGGLE_BIT(*Port_reg,Channel);
    124c:	e9 81       	ldd	r30, Y+1	; 0x01
    124e:	fa 81       	ldd	r31, Y+2	; 0x02
    1250:	40 81       	ld	r20, Z
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <Dio_ChannelToggle+0x2a>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <Dio_ChannelToggle+0x26>
    1268:	84 27       	eor	r24, r20
    126a:	e9 81       	ldd	r30, Y+1	; 0x01
    126c:	fa 81       	ldd	r31, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <Dio_PortWrite>:

void Dio_PortWrite(volatile uint8 * Port_reg, uint8 Value)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <Dio_PortWrite+0x6>
    1282:	0f 92       	push	r0
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	9a 83       	std	Y+2, r25	; 0x02
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6b 83       	std	Y+3, r22	; 0x03
	*Port_reg = Value;
    128e:	e9 81       	ldd	r30, Y+1	; 0x01
    1290:	fa 81       	ldd	r31, Y+2	; 0x02
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	80 83       	st	Z, r24
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <Dio_PortRead>:

uint8 Dio_PortRead(volatile uint8 * Port_reg)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <Dio_PortRead+0x6>
    12a8:	0f 92       	push	r0
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	9b 83       	std	Y+3, r25	; 0x03
    12b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8LocalPortValue = *Port_reg;
    12b2:	ea 81       	ldd	r30, Y+2	; 0x02
    12b4:	fb 81       	ldd	r31, Y+3	; 0x03
    12b6:	80 81       	ld	r24, Z
    12b8:	89 83       	std	Y+1, r24	; 0x01
	return u8LocalPortValue;
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <Gpt_Init>:
#include "Gpt.h"
#include "ATmega32_Cfg.h"
#include "Macros.h"

void Gpt_Init(const Gpt_ConfigType *ConfigPtr)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	28 97       	sbiw	r28, 0x08	; 8
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01

	switch(ConfigPtr->GptNo)
    12e0:	e9 81       	ldd	r30, Y+1	; 0x01
    12e2:	fa 81       	ldd	r31, Y+2	; 0x02
    12e4:	80 81       	ld	r24, Z
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	38 87       	std	Y+8, r19	; 0x08
    12ec:	2f 83       	std	Y+7, r18	; 0x07
    12ee:	8f 81       	ldd	r24, Y+7	; 0x07
    12f0:	98 85       	ldd	r25, Y+8	; 0x08
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	39 f0       	breq	.+14     	; 0x1304 <Gpt_Init+0x3c>
    12f6:	2f 81       	ldd	r18, Y+7	; 0x07
    12f8:	38 85       	ldd	r19, Y+8	; 0x08
    12fa:	21 30       	cpi	r18, 0x01	; 1
    12fc:	31 05       	cpc	r19, r1
    12fe:	09 f4       	brne	.+2      	; 0x1302 <Gpt_Init+0x3a>
    1300:	52 c0       	rjmp	.+164    	; 0x13a6 <Gpt_Init+0xde>
    1302:	ae c0       	rjmp	.+348    	; 0x1460 <Gpt_Init+0x198>
	{
		case GPT_TIMER0:
		/* !Comment: Clear Registers before applying configuration */
		*TIMER0_CTRL_REG = 0x00U;
    1304:	e3 e5       	ldi	r30, 0x53	; 83
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	10 82       	st	Z, r1
		/* !Comment: Apply configuration */
		switch(ConfigPtr->GptMode)
    130a:	e9 81       	ldd	r30, Y+1	; 0x01
    130c:	fa 81       	ldd	r31, Y+2	; 0x02
    130e:	81 81       	ldd	r24, Z+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	3e 83       	std	Y+6, r19	; 0x06
    1316:	2d 83       	std	Y+5, r18	; 0x05
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	31 f0       	breq	.+12     	; 0x132c <Gpt_Init+0x64>
    1320:	2d 81       	ldd	r18, Y+5	; 0x05
    1322:	3e 81       	ldd	r19, Y+6	; 0x06
    1324:	28 30       	cpi	r18, 0x08	; 8
    1326:	31 05       	cpc	r19, r1
    1328:	91 f0       	breq	.+36     	; 0x134e <Gpt_Init+0x86>
    132a:	2f c0       	rjmp	.+94     	; 0x138a <Gpt_Init+0xc2>
		{
			case GPT_NORMAL_MODE:
			*TIMER0_CTRL_REG |= GPT_NORMAL_MODE;
    132c:	a3 e5       	ldi	r26, 0x53	; 83
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e3 e5       	ldi	r30, 0x53	; 83
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8c 93       	st	X, r24
			*TIMER_INT_MASK_REG |= ConfigPtr->GptIntState;
    1338:	a9 e5       	ldi	r26, 0x59	; 89
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e9 e5       	ldi	r30, 0x59	; 89
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	90 81       	ld	r25, Z
    1342:	e9 81       	ldd	r30, Y+1	; 0x01
    1344:	fa 81       	ldd	r31, Y+2	; 0x02
    1346:	83 81       	ldd	r24, Z+3	; 0x03
    1348:	89 2b       	or	r24, r25
    134a:	8c 93       	st	X, r24
    134c:	1e c0       	rjmp	.+60     	; 0x138a <Gpt_Init+0xc2>
			break;
			case GPT_CTC_MODE:
			*TIMER0_CTRL_REG |= GPT_CTC_MODE;
    134e:	a3 e5       	ldi	r26, 0x53	; 83
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e3 e5       	ldi	r30, 0x53	; 83
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	88 60       	ori	r24, 0x08	; 8
    135a:	8c 93       	st	X, r24
			*TIMER_INT_MASK_REG |= (ConfigPtr->GptIntState << TIMER0_CMP_MATCH_INT_ENABLE_BIT);
    135c:	a9 e5       	ldi	r26, 0x59	; 89
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e9 e5       	ldi	r30, 0x59	; 89
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	28 2f       	mov	r18, r24
    1368:	e9 81       	ldd	r30, Y+1	; 0x01
    136a:	fa 81       	ldd	r31, Y+2	; 0x02
    136c:	83 81       	ldd	r24, Z+3	; 0x03
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	82 2b       	or	r24, r18
    1378:	8c 93       	st	X, r24
			*TIMER0_CMP_REG = (ConfigPtr->GptCmpValue - 1U);
    137a:	ac e5       	ldi	r26, 0x5C	; 92
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e9 81       	ldd	r30, Y+1	; 0x01
    1380:	fa 81       	ldd	r31, Y+2	; 0x02
    1382:	84 81       	ldd	r24, Z+4	; 0x04
    1384:	95 81       	ldd	r25, Z+5	; 0x05
    1386:	81 50       	subi	r24, 0x01	; 1
    1388:	8c 93       	st	X, r24
			break;
			default:
			break;
		}
		*TIMER0_CTRL_REG |= ConfigPtr->GptClkDivision;
    138a:	a3 e5       	ldi	r26, 0x53	; 83
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e3 e5       	ldi	r30, 0x53	; 83
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	90 81       	ld	r25, Z
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	89 2b       	or	r24, r25
    139c:	8c 93       	st	X, r24
		*TIMER0_COUNTER_REG = 0x00U;
    139e:	e2 e5       	ldi	r30, 0x52	; 82
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	10 82       	st	Z, r1
    13a4:	5d c0       	rjmp	.+186    	; 0x1460 <Gpt_Init+0x198>
		break;
		case GPT_TIMER1:
		/* !Comment: Clear Registers before applying configuration */
		*TIMER1_CTRL_B_REG = 0x00U;
    13a6:	ee e4       	ldi	r30, 0x4E	; 78
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	10 82       	st	Z, r1
		*(uint16 *)TIMER1_COUNTER_LOW_REG = 0x00U;
    13ac:	ec e4       	ldi	r30, 0x4C	; 76
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	11 82       	std	Z+1, r1	; 0x01
    13b2:	10 82       	st	Z, r1
		/* !Comment: Apply configuration */
		switch(ConfigPtr->GptMode)
    13b4:	e9 81       	ldd	r30, Y+1	; 0x01
    13b6:	fa 81       	ldd	r31, Y+2	; 0x02
    13b8:	81 81       	ldd	r24, Z+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3c 83       	std	Y+4, r19	; 0x04
    13c0:	2b 83       	std	Y+3, r18	; 0x03
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	31 f0       	breq	.+12     	; 0x13d6 <Gpt_Init+0x10e>
    13ca:	2b 81       	ldd	r18, Y+3	; 0x03
    13cc:	3c 81       	ldd	r19, Y+4	; 0x04
    13ce:	28 30       	cpi	r18, 0x08	; 8
    13d0:	31 05       	cpc	r19, r1
    13d2:	c9 f0       	breq	.+50     	; 0x1406 <Gpt_Init+0x13e>
    13d4:	3b c0       	rjmp	.+118    	; 0x144c <Gpt_Init+0x184>
		{
			case GPT_NORMAL_MODE:
			*TIMER1_CTRL_B_REG |= GPT_NORMAL_MODE;
    13d6:	ae e4       	ldi	r26, 0x4E	; 78
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ee e4       	ldi	r30, 0x4E	; 78
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8c 93       	st	X, r24
			*TIMER_INT_MASK_REG |= (ConfigPtr->GptIntState << TIMER1_OVF_INT_ENABLE_BIT);
    13e2:	a9 e5       	ldi	r26, 0x59	; 89
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e9 e5       	ldi	r30, 0x59	; 89
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	28 2f       	mov	r18, r24
    13ee:	e9 81       	ldd	r30, Y+1	; 0x01
    13f0:	fa 81       	ldd	r31, Y+2	; 0x02
    13f2:	83 81       	ldd	r24, Z+3	; 0x03
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	82 2b       	or	r24, r18
    1402:	8c 93       	st	X, r24
    1404:	23 c0       	rjmp	.+70     	; 0x144c <Gpt_Init+0x184>
			break;
			case GPT_CTC_MODE:
			*TIMER1_CTRL_B_REG |= GPT_CTC_MODE;
    1406:	ae e4       	ldi	r26, 0x4E	; 78
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	ee e4       	ldi	r30, 0x4E	; 78
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	8c 93       	st	X, r24
			*TIMER_INT_MASK_REG |= (ConfigPtr->GptIntState << TIMER1_CMP_MATCH_A_INT_ENABLE_BIT);
    1414:	a9 e5       	ldi	r26, 0x59	; 89
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e9 e5       	ldi	r30, 0x59	; 89
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	28 2f       	mov	r18, r24
    1420:	e9 81       	ldd	r30, Y+1	; 0x01
    1422:	fa 81       	ldd	r31, Y+2	; 0x02
    1424:	83 81       	ldd	r24, Z+3	; 0x03
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	82 95       	swap	r24
    142c:	92 95       	swap	r25
    142e:	90 7f       	andi	r25, 0xF0	; 240
    1430:	98 27       	eor	r25, r24
    1432:	80 7f       	andi	r24, 0xF0	; 240
    1434:	98 27       	eor	r25, r24
    1436:	82 2b       	or	r24, r18
    1438:	8c 93       	st	X, r24
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (ConfigPtr->GptCmpValue -1U);
    143a:	aa e4       	ldi	r26, 0x4A	; 74
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e9 81       	ldd	r30, Y+1	; 0x01
    1440:	fa 81       	ldd	r31, Y+2	; 0x02
    1442:	84 81       	ldd	r24, Z+4	; 0x04
    1444:	95 81       	ldd	r25, Z+5	; 0x05
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	8d 93       	st	X+, r24
    144a:	9c 93       	st	X, r25
			break;
			default:
			break;
		}
		*TIMER1_CTRL_B_REG |= ConfigPtr->GptClkDivision;
    144c:	ae e4       	ldi	r26, 0x4E	; 78
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	ee e4       	ldi	r30, 0x4E	; 78
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	90 81       	ld	r25, Z
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	89 2b       	or	r24, r25
    145e:	8c 93       	st	X, r24
		case GPT_TIMER2:
		break;
		default:
		break;
	}
}
    1460:	28 96       	adiw	r28, 0x08	; 8
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <Gpt_StatusGet>:

Gpt_StatusType Gpt_StatusGet(Gpt_ChannelType Channel)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	28 97       	sbiw	r28, 0x08	; 8
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	8a 83       	std	Y+2, r24	; 0x02
	Gpt_StatusType enuLocalGptStatus = GPT_STATUS_RUNNING;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	89 83       	std	Y+1, r24	; 0x01
	switch(Channel)
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	38 87       	std	Y+8, r19	; 0x08
    1494:	2f 83       	std	Y+7, r18	; 0x07
    1496:	8f 81       	ldd	r24, Y+7	; 0x07
    1498:	98 85       	ldd	r25, Y+8	; 0x08
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	31 f0       	breq	.+12     	; 0x14aa <Gpt_StatusGet+0x38>
    149e:	2f 81       	ldd	r18, Y+7	; 0x07
    14a0:	38 85       	ldd	r19, Y+8	; 0x08
    14a2:	21 30       	cpi	r18, 0x01	; 1
    14a4:	31 05       	cpc	r19, r1
    14a6:	c9 f1       	breq	.+114    	; 0x151a <Gpt_StatusGet+0xa8>
    14a8:	75 c0       	rjmp	.+234    	; 0x1594 <Gpt_StatusGet+0x122>
	{
		case GPT_TIMER0:
		switch(gaStrGpt_Configuration[GPT_TIMER0].GptMode)
    14aa:	80 91 e4 01 	lds	r24, 0x01E4
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	3e 83       	std	Y+6, r19	; 0x06
    14b4:	2d 83       	std	Y+5, r18	; 0x05
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	31 f0       	breq	.+12     	; 0x14ca <Gpt_StatusGet+0x58>
    14be:	2d 81       	ldd	r18, Y+5	; 0x05
    14c0:	3e 81       	ldd	r19, Y+6	; 0x06
    14c2:	28 30       	cpi	r18, 0x08	; 8
    14c4:	31 05       	cpc	r19, r1
    14c6:	a1 f0       	breq	.+40     	; 0x14f0 <Gpt_StatusGet+0x7e>
    14c8:	65 c0       	rjmp	.+202    	; 0x1594 <Gpt_StatusGet+0x122>
		{
			case GPT_NORMAL_MODE:
			if (READ_BIT(*TIMER_INT_FLAG_REG, TIMER0_OVF_BIT))
    14ca:	e8 e5       	ldi	r30, 0x58	; 88
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	81 70       	andi	r24, 0x01	; 1
    14d6:	90 70       	andi	r25, 0x00	; 0
    14d8:	88 23       	and	r24, r24
    14da:	09 f4       	brne	.+2      	; 0x14de <Gpt_StatusGet+0x6c>
    14dc:	5b c0       	rjmp	.+182    	; 0x1594 <Gpt_StatusGet+0x122>
			{
				enuLocalGptStatus = GPT_STATUS_OV_CMP;
    14de:	19 82       	std	Y+1, r1	; 0x01
				/* !Comment: Clear The TOV bit */
				SET_BIT(*TIMER_INT_FLAG_REG, TIMER0_OVF_BIT);
    14e0:	a8 e5       	ldi	r26, 0x58	; 88
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e8 e5       	ldi	r30, 0x58	; 88
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	81 60       	ori	r24, 0x01	; 1
    14ec:	8c 93       	st	X, r24
    14ee:	52 c0       	rjmp	.+164    	; 0x1594 <Gpt_StatusGet+0x122>
			{
				/* Do Nothing */
			}
			break;
			case GPT_CTC_MODE:
			if (READ_BIT(*TIMER_INT_FLAG_REG, TIMER0_CMP_MATCH_BIT))
    14f0:	e8 e5       	ldi	r30, 0x58	; 88
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	82 70       	andi	r24, 0x02	; 2
    14fc:	90 70       	andi	r25, 0x00	; 0
    14fe:	96 95       	lsr	r25
    1500:	87 95       	ror	r24
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	09 f4       	brne	.+2      	; 0x1508 <Gpt_StatusGet+0x96>
    1506:	46 c0       	rjmp	.+140    	; 0x1594 <Gpt_StatusGet+0x122>
			{
				enuLocalGptStatus = GPT_STATUS_OV_CMP;
    1508:	19 82       	std	Y+1, r1	; 0x01
				/* !Comment: Clear The OCF bit */
				SET_BIT(*TIMER_INT_FLAG_REG, TIMER0_CMP_MATCH_BIT);
    150a:	a8 e5       	ldi	r26, 0x58	; 88
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e8 e5       	ldi	r30, 0x58	; 88
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	82 60       	ori	r24, 0x02	; 2
    1516:	8c 93       	st	X, r24
    1518:	3d c0       	rjmp	.+122    	; 0x1594 <Gpt_StatusGet+0x122>
			default:
			break;
		}
		break;
		case GPT_TIMER1:
		switch(gaStrGpt_Configuration[GPT_TIMER1].GptMode)
    151a:	80 91 ea 01 	lds	r24, 0x01EA
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3c 83       	std	Y+4, r19	; 0x04
    1524:	2b 83       	std	Y+3, r18	; 0x03
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	31 f0       	breq	.+12     	; 0x153a <Gpt_StatusGet+0xc8>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	28 30       	cpi	r18, 0x08	; 8
    1534:	31 05       	cpc	r19, r1
    1536:	b9 f0       	breq	.+46     	; 0x1566 <Gpt_StatusGet+0xf4>
    1538:	2d c0       	rjmp	.+90     	; 0x1594 <Gpt_StatusGet+0x122>
		{
			case GPT_NORMAL_MODE:
			if (READ_BIT(*TIMER_INT_FLAG_REG, TIMER1_OVF_BIT))
    153a:	e8 e5       	ldi	r30, 0x58	; 88
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	84 70       	andi	r24, 0x04	; 4
    1546:	90 70       	andi	r25, 0x00	; 0
    1548:	96 95       	lsr	r25
    154a:	87 95       	ror	r24
    154c:	96 95       	lsr	r25
    154e:	87 95       	ror	r24
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	01 f1       	breq	.+64     	; 0x1594 <Gpt_StatusGet+0x122>
			{
				enuLocalGptStatus = GPT_STATUS_OV_CMP;
    1554:	19 82       	std	Y+1, r1	; 0x01
				/* !Comment: Clear The TOV bit */
				SET_BIT(*TIMER_INT_FLAG_REG, TIMER1_OVF_BIT);
    1556:	a8 e5       	ldi	r26, 0x58	; 88
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e8 e5       	ldi	r30, 0x58	; 88
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	84 60       	ori	r24, 0x04	; 4
    1562:	8c 93       	st	X, r24
    1564:	17 c0       	rjmp	.+46     	; 0x1594 <Gpt_StatusGet+0x122>
			{
				/* Do Nothing */
			}
			break;
			case GPT_CTC_MODE:
			if (READ_BIT(*TIMER_INT_FLAG_REG, TIMER1_CMP_MATCH_A_BIT))
    1566:	e8 e5       	ldi	r30, 0x58	; 88
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	80 71       	andi	r24, 0x10	; 16
    1572:	90 70       	andi	r25, 0x00	; 0
    1574:	92 95       	swap	r25
    1576:	82 95       	swap	r24
    1578:	8f 70       	andi	r24, 0x0F	; 15
    157a:	89 27       	eor	r24, r25
    157c:	9f 70       	andi	r25, 0x0F	; 15
    157e:	89 27       	eor	r24, r25
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	41 f0       	breq	.+16     	; 0x1594 <Gpt_StatusGet+0x122>
			{
				enuLocalGptStatus = GPT_STATUS_OV_CMP;
    1584:	19 82       	std	Y+1, r1	; 0x01
				/* !Comment: Clear The TOV bit */
				SET_BIT(*TIMER_INT_FLAG_REG, TIMER1_CMP_MATCH_A_BIT);
    1586:	a8 e5       	ldi	r26, 0x58	; 88
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e8 e5       	ldi	r30, 0x58	; 88
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 61       	ori	r24, 0x10	; 16
    1592:	8c 93       	st	X, r24
		case GPT_TIMER2:
		break;
		default:
		break;
	}
	return (enuLocalGptStatus);
    1594:	89 81       	ldd	r24, Y+1	; 0x01
}
    1596:	28 96       	adiw	r28, 0x08	; 8
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <LCD_Init>:
#include <stdlib.h>
#include <util/delay.h>


void LCD_Init(void)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	2e 97       	sbiw	r28, 0x0e	; 14
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 ea       	ldi	r26, 0xA0	; 160
    15c2:	b1 e4       	ldi	r27, 0x41	; 65
    15c4:	8b 87       	std	Y+11, r24	; 0x0b
    15c6:	9c 87       	std	Y+12, r25	; 0x0c
    15c8:	ad 87       	std	Y+13, r26	; 0x0d
    15ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a e7       	ldi	r20, 0x7A	; 122
    15da:	55 e4       	ldi	r21, 0x45	; 69
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8f 83       	std	Y+7, r24	; 0x07
    15e6:	98 87       	std	Y+8, r25	; 0x08
    15e8:	a9 87       	std	Y+9, r26	; 0x09
    15ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ec:	6f 81       	ldd	r22, Y+7	; 0x07
    15ee:	78 85       	ldd	r23, Y+8	; 0x08
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1600:	88 23       	and	r24, r24
    1602:	2c f4       	brge	.+10     	; 0x160e <LCD_Init+0x66>
		__ticks = 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	3f c0       	rjmp	.+126    	; 0x168c <LCD_Init+0xe4>
	else if (__tmp > 65535)
    160e:	6f 81       	ldd	r22, Y+7	; 0x07
    1610:	78 85       	ldd	r23, Y+8	; 0x08
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	9a 85       	ldd	r25, Y+10	; 0x0a
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	4c f5       	brge	.+82     	; 0x1678 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	6b 85       	ldd	r22, Y+11	; 0x0b
    1628:	7c 85       	ldd	r23, Y+12	; 0x0c
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	0f c0       	rjmp	.+30     	; 0x166e <LCD_Init+0xc6>
    1650:	80 e9       	ldi	r24, 0x90	; 144
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	9c 83       	std	Y+4, r25	; 0x04
    1656:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <LCD_Init+0xb4>
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	69 f7       	brne	.-38     	; 0x1650 <LCD_Init+0xa8>
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	6f 81       	ldd	r22, Y+7	; 0x07
    167a:	78 85       	ldd	r23, Y+8	; 0x08
    167c:	89 85       	ldd	r24, Y+9	; 0x09
    167e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_Init+0xf0>
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
	/* !Comment: Wait for more than 15 ms after VCC rises to 4.5V   */
	_delay_ms(20U);
	/* !Comment: Set The Control Pins Direction to OUTPUT   */
	Dio_ChannelDirectionSet(LCD_CTRL_DIR_REG, LCD_RS, DIO_OUTPUT);
    16a0:	87 e3       	ldi	r24, 0x37	; 55
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(LCD_CTRL_DIR_REG, LCD_RW, DIO_OUTPUT);
    16ac:	87 e3       	ldi	r24, 0x37	; 55
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	62 e0       	ldi	r22, 0x02	; 2
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(LCD_CTRL_DIR_REG, LCD_EN, DIO_OUTPUT);
    16b8:	87 e3       	ldi	r24, 0x37	; 55
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	63 e0       	ldi	r22, 0x03	; 3
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Dio_ChannelDirectionSet>
#if LCD_EIGHTBIT_DATA
	/* !Comment: Set the Direction of the 8 Data pins to OUTPUT   */
	*LCD_DATA_DIR_REG = 0xFFU;
#else
	/* !Comment: Set the Direction of the Upper 4 Data pins to OUTPUT   */
	*LCD_DATA_DIR_REG |= (0xF0U);
    16c4:	aa e3       	ldi	r26, 0x3A	; 58
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ea e3       	ldi	r30, 0x3A	; 58
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 6f       	ori	r24, 0xF0	; 240
    16d0:	8c 93       	st	X, r24
	LCD_Send_Instruction(LCD_RETURN_HOME);
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_Send_Instruction>
#endif
	/* !Comment: Set the initial configurations you made in the config file  */
	LCD_Send_Instruction(LCD_FUNCTION_SET);
    16d8:	88 e2       	ldi	r24, 0x28	; 40
    16da:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_Send_Instruction>
	LCD_Send_Instruction(LCD_DISPLAY_ON);
    16de:	8c e0       	ldi	r24, 0x0C	; 12
    16e0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_Send_Instruction>
	LCD_Send_Instruction(LCD_CLEAR_DISPLAY);
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_Send_Instruction>
}
    16ea:	2e 96       	adiw	r28, 0x0e	; 14
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <LCD_Send_Instruction>:

void LCD_Send_Instruction(uint8 Instruction)
{
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	c3 56       	subi	r28, 0x63	; 99
    170a:	d0 40       	sbci	r29, 0x00	; 0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	fe 01       	movw	r30, r28
    1718:	ed 59       	subi	r30, 0x9D	; 157
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 83       	st	Z, r24
	/* !Comment: RW, RS Should be 0 when Writing instructions to LCD  */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RS, DIO_LOW);
    171e:	88 e3       	ldi	r24, 0x38	; 56
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RW, DIO_LOW);
    172a:	88 e3       	ldi	r24, 0x38	; 56
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	62 e0       	ldi	r22, 0x02	; 2
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    1736:	fe 01       	movw	r30, r28
    1738:	e1 5a       	subi	r30, 0xA1	; 161
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	a0 e8       	ldi	r26, 0x80	; 128
    1742:	bf e3       	ldi	r27, 0x3F	; 63
    1744:	80 83       	st	Z, r24
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	a2 83       	std	Z+2, r26	; 0x02
    174a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174c:	8e 01       	movw	r16, r28
    174e:	05 5a       	subi	r16, 0xA5	; 165
    1750:	1f 4f       	sbci	r17, 0xFF	; 255
    1752:	fe 01       	movw	r30, r28
    1754:	e1 5a       	subi	r30, 0xA1	; 161
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	4a e7       	ldi	r20, 0x7A	; 122
    1766:	55 e4       	ldi	r21, 0x45	; 69
    1768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	f8 01       	movw	r30, r16
    1772:	80 83       	st	Z, r24
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	a2 83       	std	Z+2, r26	; 0x02
    1778:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    177a:	fe 01       	movw	r30, r28
    177c:	e5 5a       	subi	r30, 0xA5	; 165
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e8       	ldi	r20, 0x80	; 128
    178e:	5f e3       	ldi	r21, 0x3F	; 63
    1790:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1794:	88 23       	and	r24, r24
    1796:	44 f4       	brge	.+16     	; 0x17a8 <LCD_Send_Instruction+0xac>
		__ticks = 1;
    1798:	fe 01       	movw	r30, r28
    179a:	e7 5a       	subi	r30, 0xA7	; 167
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	80 83       	st	Z, r24
    17a6:	64 c0       	rjmp	.+200    	; 0x1870 <LCD_Send_Instruction+0x174>
	else if (__tmp > 65535)
    17a8:	fe 01       	movw	r30, r28
    17aa:	e5 5a       	subi	r30, 0xA5	; 165
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	57 e4       	ldi	r21, 0x47	; 71
    17be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	0c f0       	brlt	.+2      	; 0x17c8 <LCD_Send_Instruction+0xcc>
    17c6:	43 c0       	rjmp	.+134    	; 0x184e <LCD_Send_Instruction+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c8:	fe 01       	movw	r30, r28
    17ca:	e1 5a       	subi	r30, 0xA1	; 161
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	8e 01       	movw	r16, r28
    17e8:	07 5a       	subi	r16, 0xA7	; 167
    17ea:	1f 4f       	sbci	r17, 0xFF	; 255
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	f8 01       	movw	r30, r16
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	80 83       	st	Z, r24
    17fe:	1f c0       	rjmp	.+62     	; 0x183e <LCD_Send_Instruction+0x142>
    1800:	fe 01       	movw	r30, r28
    1802:	e9 5a       	subi	r30, 0xA9	; 169
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 e9       	ldi	r24, 0x90	; 144
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	91 83       	std	Z+1, r25	; 0x01
    180c:	80 83       	st	Z, r24
    180e:	fe 01       	movw	r30, r28
    1810:	e9 5a       	subi	r30, 0xA9	; 169
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <LCD_Send_Instruction+0x11c>
    181c:	fe 01       	movw	r30, r28
    181e:	e9 5a       	subi	r30, 0xA9	; 169
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	de 01       	movw	r26, r28
    1828:	a7 5a       	subi	r26, 0xA7	; 167
    182a:	bf 4f       	sbci	r27, 0xFF	; 255
    182c:	fe 01       	movw	r30, r28
    182e:	e7 5a       	subi	r30, 0xA7	; 167
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	11 96       	adiw	r26, 0x01	; 1
    183a:	9c 93       	st	X, r25
    183c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183e:	fe 01       	movw	r30, r28
    1840:	e7 5a       	subi	r30, 0xA7	; 167
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	80 81       	ld	r24, Z
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	d1 f6       	brne	.-76     	; 0x1800 <LCD_Send_Instruction+0x104>
    184c:	27 c0       	rjmp	.+78     	; 0x189c <LCD_Send_Instruction+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184e:	8e 01       	movw	r16, r28
    1850:	07 5a       	subi	r16, 0xA7	; 167
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
    1854:	fe 01       	movw	r30, r28
    1856:	e5 5a       	subi	r30, 0xA5	; 165
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	f8 01       	movw	r30, r16
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
    1870:	de 01       	movw	r26, r28
    1872:	ab 5a       	subi	r26, 0xAB	; 171
    1874:	bf 4f       	sbci	r27, 0xFF	; 255
    1876:	fe 01       	movw	r30, r28
    1878:	e7 5a       	subi	r30, 0xA7	; 167
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	8d 93       	st	X+, r24
    1882:	9c 93       	st	X, r25
    1884:	fe 01       	movw	r30, r28
    1886:	eb 5a       	subi	r30, 0xAB	; 171
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <LCD_Send_Instruction+0x192>
    1892:	fe 01       	movw	r30, r28
    1894:	eb 5a       	subi	r30, 0xAB	; 171
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
	/* !Comment: Delay of Address Set 60ns minimum */
	_delay_ms(1);
	/* !Comment: Enable LCD E=1 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
    189c:	88 e3       	ldi	r24, 0x38	; 56
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	63 e0       	ldi	r22, 0x03	; 3
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    18a8:	fe 01       	movw	r30, r28
    18aa:	ef 5a       	subi	r30, 0xAF	; 175
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a0 e8       	ldi	r26, 0x80	; 128
    18b4:	bf e3       	ldi	r27, 0x3F	; 63
    18b6:	80 83       	st	Z, r24
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	a2 83       	std	Z+2, r26	; 0x02
    18bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18be:	8e 01       	movw	r16, r28
    18c0:	03 5b       	subi	r16, 0xB3	; 179
    18c2:	1f 4f       	sbci	r17, 0xFF	; 255
    18c4:	fe 01       	movw	r30, r28
    18c6:	ef 5a       	subi	r30, 0xAF	; 175
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	60 81       	ld	r22, Z
    18cc:	71 81       	ldd	r23, Z+1	; 0x01
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	93 81       	ldd	r25, Z+3	; 0x03
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	4a e7       	ldi	r20, 0x7A	; 122
    18d8:	55 e4       	ldi	r21, 0x45	; 69
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	f8 01       	movw	r30, r16
    18e4:	80 83       	st	Z, r24
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	a2 83       	std	Z+2, r26	; 0x02
    18ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ec:	fe 01       	movw	r30, r28
    18ee:	e3 5b       	subi	r30, 0xB3	; 179
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	44 f4       	brge	.+16     	; 0x191a <LCD_Send_Instruction+0x21e>
		__ticks = 1;
    190a:	fe 01       	movw	r30, r28
    190c:	e5 5b       	subi	r30, 0xB5	; 181
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	80 83       	st	Z, r24
    1918:	64 c0       	rjmp	.+200    	; 0x19e2 <LCD_Send_Instruction+0x2e6>
	else if (__tmp > 65535)
    191a:	fe 01       	movw	r30, r28
    191c:	e3 5b       	subi	r30, 0xB3	; 179
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	4f e7       	ldi	r20, 0x7F	; 127
    192e:	57 e4       	ldi	r21, 0x47	; 71
    1930:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1934:	18 16       	cp	r1, r24
    1936:	0c f0       	brlt	.+2      	; 0x193a <LCD_Send_Instruction+0x23e>
    1938:	43 c0       	rjmp	.+134    	; 0x19c0 <LCD_Send_Instruction+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	fe 01       	movw	r30, r28
    193c:	ef 5a       	subi	r30, 0xAF	; 175
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	60 81       	ld	r22, Z
    1942:	71 81       	ldd	r23, Z+1	; 0x01
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	93 81       	ldd	r25, Z+3	; 0x03
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e2       	ldi	r20, 0x20	; 32
    194e:	51 e4       	ldi	r21, 0x41	; 65
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	8e 01       	movw	r16, r28
    195a:	05 5b       	subi	r16, 0xB5	; 181
    195c:	1f 4f       	sbci	r17, 0xFF	; 255
    195e:	bc 01       	movw	r22, r24
    1960:	cd 01       	movw	r24, r26
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	f8 01       	movw	r30, r16
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
    1970:	1f c0       	rjmp	.+62     	; 0x19b0 <LCD_Send_Instruction+0x2b4>
    1972:	fe 01       	movw	r30, r28
    1974:	e7 5b       	subi	r30, 0xB7	; 183
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	80 e9       	ldi	r24, 0x90	; 144
    197a:	91 e0       	ldi	r25, 0x01	; 1
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	80 83       	st	Z, r24
    1980:	fe 01       	movw	r30, r28
    1982:	e7 5b       	subi	r30, 0xB7	; 183
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	80 81       	ld	r24, Z
    1988:	91 81       	ldd	r25, Z+1	; 0x01
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_Send_Instruction+0x28e>
    198e:	fe 01       	movw	r30, r28
    1990:	e7 5b       	subi	r30, 0xB7	; 183
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	91 83       	std	Z+1, r25	; 0x01
    1996:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	de 01       	movw	r26, r28
    199a:	a5 5b       	subi	r26, 0xB5	; 181
    199c:	bf 4f       	sbci	r27, 0xFF	; 255
    199e:	fe 01       	movw	r30, r28
    19a0:	e5 5b       	subi	r30, 0xB5	; 181
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	11 96       	adiw	r26, 0x01	; 1
    19ac:	9c 93       	st	X, r25
    19ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b0:	fe 01       	movw	r30, r28
    19b2:	e5 5b       	subi	r30, 0xB5	; 181
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	d1 f6       	brne	.-76     	; 0x1972 <LCD_Send_Instruction+0x276>
    19be:	27 c0       	rjmp	.+78     	; 0x1a0e <LCD_Send_Instruction+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	8e 01       	movw	r16, r28
    19c2:	05 5b       	subi	r16, 0xB5	; 181
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	fe 01       	movw	r30, r28
    19c8:	e3 5b       	subi	r30, 0xB3	; 179
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	f8 01       	movw	r30, r16
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
    19e2:	de 01       	movw	r26, r28
    19e4:	a9 5b       	subi	r26, 0xB9	; 185
    19e6:	bf 4f       	sbci	r27, 0xFF	; 255
    19e8:	fe 01       	movw	r30, r28
    19ea:	e5 5b       	subi	r30, 0xB5	; 181
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	8d 93       	st	X+, r24
    19f4:	9c 93       	st	X, r25
    19f6:	fe 01       	movw	r30, r28
    19f8:	e9 5b       	subi	r30, 0xB9	; 185
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <LCD_Send_Instruction+0x304>
    1a04:	fe 01       	movw	r30, r28
    1a06:	e9 5b       	subi	r30, 0xB9	; 185
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	80 83       	st	Z, r24
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);
#else
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
    1a0e:	ab e3       	ldi	r26, 0x3B	; 59
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	eb e3       	ldi	r30, 0x3B	; 59
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8f 70       	andi	r24, 0x0F	; 15
    1a1a:	8c 93       	st	X, r24
	*LCD_DATA_OUT_REG |= (Instruction & 0xF0U);
    1a1c:	ab e3       	ldi	r26, 0x3B	; 59
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	eb e3       	ldi	r30, 0x3B	; 59
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	90 81       	ld	r25, Z
    1a26:	fe 01       	movw	r30, r28
    1a28:	ed 59       	subi	r30, 0x9D	; 157
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 7f       	andi	r24, 0xF0	; 240
    1a30:	89 2b       	or	r24, r25
    1a32:	8c 93       	st	X, r24
    1a34:	fe 01       	movw	r30, r28
    1a36:	ed 5b       	subi	r30, 0xBD	; 189
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e8       	ldi	r26, 0x80	; 128
    1a40:	bf e3       	ldi	r27, 0x3F	; 63
    1a42:	80 83       	st	Z, r24
    1a44:	91 83       	std	Z+1, r25	; 0x01
    1a46:	a2 83       	std	Z+2, r26	; 0x02
    1a48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	8e 01       	movw	r16, r28
    1a4c:	01 5c       	subi	r16, 0xC1	; 193
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	fe 01       	movw	r30, r28
    1a52:	ed 5b       	subi	r30, 0xBD	; 189
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a e7       	ldi	r20, 0x7A	; 122
    1a64:	55 e4       	ldi	r21, 0x45	; 69
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	f8 01       	movw	r30, r16
    1a70:	80 83       	st	Z, r24
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	a2 83       	std	Z+2, r26	; 0x02
    1a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ff 96       	adiw	r30, 0x3f	; 63
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a90:	88 23       	and	r24, r24
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <LCD_Send_Instruction+0x3a2>
		__ticks = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9e af       	std	Y+62, r25	; 0x3e
    1a9a:	8d af       	std	Y+61, r24	; 0x3d
    1a9c:	46 c0       	rjmp	.+140    	; 0x1b2a <LCD_Send_Instruction+0x42e>
	else if (__tmp > 65535)
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ff 96       	adiw	r30, 0x3f	; 63
    1aa2:	60 81       	ld	r22, Z
    1aa4:	71 81       	ldd	r23, Z+1	; 0x01
    1aa6:	82 81       	ldd	r24, Z+2	; 0x02
    1aa8:	93 81       	ldd	r25, Z+3	; 0x03
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	57 e4       	ldi	r21, 0x47	; 71
    1ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	64 f5       	brge	.+88     	; 0x1b12 <LCD_Send_Instruction+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aba:	fe 01       	movw	r30, r28
    1abc:	ed 5b       	subi	r30, 0xBD	; 189
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9e af       	std	Y+62, r25	; 0x3e
    1ae6:	8d af       	std	Y+61, r24	; 0x3d
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_Send_Instruction+0x40c>
    1aea:	80 e9       	ldi	r24, 0x90	; 144
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	9c af       	std	Y+60, r25	; 0x3c
    1af0:	8b af       	std	Y+59, r24	; 0x3b
    1af2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1af4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_Send_Instruction+0x3fa>
    1afa:	9c af       	std	Y+60, r25	; 0x3c
    1afc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9e af       	std	Y+62, r25	; 0x3e
    1b06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_Send_Instruction+0x3ee>
    1b10:	16 c0       	rjmp	.+44     	; 0x1b3e <LCD_Send_Instruction+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	fe 01       	movw	r30, r28
    1b14:	ff 96       	adiw	r30, 0x3f	; 63
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9e af       	std	Y+62, r25	; 0x3e
    1b28:	8d af       	std	Y+61, r24	; 0x3d
    1b2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b2e:	9a af       	std	Y+58, r25	; 0x3a
    1b30:	89 af       	std	Y+57, r24	; 0x39
    1b32:	89 ad       	ldd	r24, Y+57	; 0x39
    1b34:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <LCD_Send_Instruction+0x43a>
    1b3a:	9a af       	std	Y+58, r25	; 0x3a
    1b3c:	89 af       	std	Y+57, r24	; 0x39
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
    1b3e:	88 e3       	ldi	r24, 0x38	; 56
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	63 e0       	ldi	r22, 0x03	; 3
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	a0 e8       	ldi	r26, 0x80	; 128
    1b50:	bf e3       	ldi	r27, 0x3F	; 63
    1b52:	8d ab       	std	Y+53, r24	; 0x35
    1b54:	9e ab       	std	Y+54, r25	; 0x36
    1b56:	af ab       	std	Y+55, r26	; 0x37
    1b58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b60:	98 ad       	ldd	r25, Y+56	; 0x38
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4a e7       	ldi	r20, 0x7A	; 122
    1b68:	55 e4       	ldi	r21, 0x45	; 69
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	89 ab       	std	Y+49, r24	; 0x31
    1b74:	9a ab       	std	Y+50, r25	; 0x32
    1b76:	ab ab       	std	Y+51, r26	; 0x33
    1b78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b80:	9c a9       	ldd	r25, Y+52	; 0x34
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	5f e3       	ldi	r21, 0x3F	; 63
    1b8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <LCD_Send_Instruction+0x4a0>
		__ticks = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
    1b9a:	3f c0       	rjmp	.+126    	; 0x1c1a <LCD_Send_Instruction+0x51e>
	else if (__tmp > 65535)
    1b9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	3f ef       	ldi	r19, 0xFF	; 255
    1ba8:	4f e7       	ldi	r20, 0x7F	; 127
    1baa:	57 e4       	ldi	r21, 0x47	; 71
    1bac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb0:	18 16       	cp	r1, r24
    1bb2:	4c f5       	brge	.+82     	; 0x1c06 <LCD_Send_Instruction+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb4:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb6:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb8:	8f a9       	ldd	r24, Y+55	; 0x37
    1bba:	98 ad       	ldd	r25, Y+56	; 0x38
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e2       	ldi	r20, 0x20	; 32
    1bc2:	51 e4       	ldi	r21, 0x41	; 65
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	98 ab       	std	Y+48, r25	; 0x30
    1bda:	8f a7       	std	Y+47, r24	; 0x2f
    1bdc:	0f c0       	rjmp	.+30     	; 0x1bfc <LCD_Send_Instruction+0x500>
    1bde:	80 e9       	ldi	r24, 0x90	; 144
    1be0:	91 e0       	ldi	r25, 0x01	; 1
    1be2:	9e a7       	std	Y+46, r25	; 0x2e
    1be4:	8d a7       	std	Y+45, r24	; 0x2d
    1be6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1be8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <LCD_Send_Instruction+0x4ee>
    1bee:	9e a7       	std	Y+46, r25	; 0x2e
    1bf0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf4:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	98 ab       	std	Y+48, r25	; 0x30
    1bfa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	69 f7       	brne	.-38     	; 0x1bde <LCD_Send_Instruction+0x4e2>
    1c04:	14 c0       	rjmp	.+40     	; 0x1c2e <LCD_Send_Instruction+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c06:	69 a9       	ldd	r22, Y+49	; 0x31
    1c08:	7a a9       	ldd	r23, Y+50	; 0x32
    1c0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	98 ab       	std	Y+48, r25	; 0x30
    1c18:	8f a7       	std	Y+47, r24	; 0x2f
    1c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1e:	9c a7       	std	Y+44, r25	; 0x2c
    1c20:	8b a7       	std	Y+43, r24	; 0x2b
    1c22:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c24:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_Send_Instruction+0x52a>
    1c2a:	9c a7       	std	Y+44, r25	; 0x2c
    1c2c:	8b a7       	std	Y+43, r24	; 0x2b
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);

	/* !Comment: Enable LCD E=1  (To write the other 4-bit of the instruction)*/
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
    1c2e:	88 e3       	ldi	r24, 0x38	; 56
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	63 e0       	ldi	r22, 0x03	; 3
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e8       	ldi	r26, 0x80	; 128
    1c40:	bf e3       	ldi	r27, 0x3F	; 63
    1c42:	8f a3       	std	Y+39, r24	; 0x27
    1c44:	98 a7       	std	Y+40, r25	; 0x28
    1c46:	a9 a7       	std	Y+41, r26	; 0x29
    1c48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a e7       	ldi	r20, 0x7A	; 122
    1c58:	55 e4       	ldi	r21, 0x45	; 69
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8b a3       	std	Y+35, r24	; 0x23
    1c64:	9c a3       	std	Y+36, r25	; 0x24
    1c66:	ad a3       	std	Y+37, r26	; 0x25
    1c68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c70:	9e a1       	ldd	r25, Y+38	; 0x26
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_Send_Instruction+0x590>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9a a3       	std	Y+34, r25	; 0x22
    1c88:	89 a3       	std	Y+33, r24	; 0x21
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD_Send_Instruction+0x60e>
	else if (__tmp > 65535)
    1c8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c90:	8d a1       	ldd	r24, Y+37	; 0x25
    1c92:	9e a1       	ldd	r25, Y+38	; 0x26
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD_Send_Instruction+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    1caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9a a3       	std	Y+34, r25	; 0x22
    1cca:	89 a3       	std	Y+33, r24	; 0x21
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_Send_Instruction+0x5f0>
    1cce:	80 e9       	ldi	r24, 0x90	; 144
    1cd0:	91 e0       	ldi	r25, 0x01	; 1
    1cd2:	98 a3       	std	Y+32, r25	; 0x20
    1cd4:	8f 8f       	std	Y+31, r24	; 0x1f
    1cd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd8:	98 a1       	ldd	r25, Y+32	; 0x20
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_Send_Instruction+0x5de>
    1cde:	98 a3       	std	Y+32, r25	; 0x20
    1ce0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9a a3       	std	Y+34, r25	; 0x22
    1cea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	89 a1       	ldd	r24, Y+33	; 0x21
    1cee:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD_Send_Instruction+0x5d2>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD_Send_Instruction+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9a a3       	std	Y+34, r25	; 0x22
    1d08:	89 a3       	std	Y+33, r24	; 0x21
    1d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d10:	8d 8f       	std	Y+29, r24	; 0x1d
    1d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_Send_Instruction+0x61a>
    1d1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d1c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* !Comment: Delay for processing PW min 450ns */
	_delay_ms(1);
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
    1d1e:	ab e3       	ldi	r26, 0x3B	; 59
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	eb e3       	ldi	r30, 0x3B	; 59
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	8f 70       	andi	r24, 0x0F	; 15
    1d2a:	8c 93       	st	X, r24
	*LCD_DATA_OUT_REG |= ((Instruction<<4) & 0xF0U);
    1d2c:	ab e3       	ldi	r26, 0x3B	; 59
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	eb e3       	ldi	r30, 0x3B	; 59
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	90 81       	ld	r25, Z
    1d36:	fe 01       	movw	r30, r28
    1d38:	ed 59       	subi	r30, 0x9D	; 157
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	82 95       	swap	r24
    1d40:	80 7f       	andi	r24, 0xF0	; 240
    1d42:	89 2b       	or	r24, r25
    1d44:	8c 93       	st	X, r24
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a0 e8       	ldi	r26, 0x80	; 128
    1d4c:	bf e3       	ldi	r27, 0x3F	; 63
    1d4e:	89 8f       	std	Y+25, r24	; 0x19
    1d50:	9a 8f       	std	Y+26, r25	; 0x1a
    1d52:	ab 8f       	std	Y+27, r26	; 0x1b
    1d54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	69 8d       	ldd	r22, Y+25	; 0x19
    1d58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a e7       	ldi	r20, 0x7A	; 122
    1d64:	55 e4       	ldi	r21, 0x45	; 69
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	8d 8b       	std	Y+21, r24	; 0x15
    1d70:	9e 8b       	std	Y+22, r25	; 0x16
    1d72:	af 8b       	std	Y+23, r26	; 0x17
    1d74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d76:	6d 89       	ldd	r22, Y+21	; 0x15
    1d78:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5f e3       	ldi	r21, 0x3F	; 63
    1d86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d8a:	88 23       	and	r24, r24
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <LCD_Send_Instruction+0x69c>
		__ticks = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9c 8b       	std	Y+20, r25	; 0x14
    1d94:	8b 8b       	std	Y+19, r24	; 0x13
    1d96:	3f c0       	rjmp	.+126    	; 0x1e16 <LCD_Send_Instruction+0x71a>
	else if (__tmp > 65535)
    1d98:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	4c f5       	brge	.+82     	; 0x1e02 <LCD_Send_Instruction+0x706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db0:	69 8d       	ldd	r22, Y+25	; 0x19
    1db2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e2       	ldi	r20, 0x20	; 32
    1dbe:	51 e4       	ldi	r21, 0x41	; 65
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9c 8b       	std	Y+20, r25	; 0x14
    1dd6:	8b 8b       	std	Y+19, r24	; 0x13
    1dd8:	0f c0       	rjmp	.+30     	; 0x1df8 <LCD_Send_Instruction+0x6fc>
    1dda:	80 e9       	ldi	r24, 0x90	; 144
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	9a 8b       	std	Y+18, r25	; 0x12
    1de0:	89 8b       	std	Y+17, r24	; 0x11
    1de2:	89 89       	ldd	r24, Y+17	; 0x11
    1de4:	9a 89       	ldd	r25, Y+18	; 0x12
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_Send_Instruction+0x6ea>
    1dea:	9a 8b       	std	Y+18, r25	; 0x12
    1dec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	8b 89       	ldd	r24, Y+19	; 0x13
    1df0:	9c 89       	ldd	r25, Y+20	; 0x14
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	69 f7       	brne	.-38     	; 0x1dda <LCD_Send_Instruction+0x6de>
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <LCD_Send_Instruction+0x72e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	6d 89       	ldd	r22, Y+21	; 0x15
    1e04:	7e 89       	ldd	r23, Y+22	; 0x16
    1e06:	8f 89       	ldd	r24, Y+23	; 0x17
    1e08:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9c 8b       	std	Y+20, r25	; 0x14
    1e14:	8b 8b       	std	Y+19, r24	; 0x13
    1e16:	8b 89       	ldd	r24, Y+19	; 0x13
    1e18:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1a:	98 8b       	std	Y+16, r25	; 0x10
    1e1c:	8f 87       	std	Y+15, r24	; 0x0f
    1e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e20:	98 89       	ldd	r25, Y+16	; 0x10
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_Send_Instruction+0x726>
    1e26:	98 8b       	std	Y+16, r25	; 0x10
    1e28:	8f 87       	std	Y+15, r24	; 0x0f
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
    1e2a:	88 e3       	ldi	r24, 0x38	; 56
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	63 e0       	ldi	r22, 0x03	; 3
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a0 e8       	ldi	r26, 0x80	; 128
    1e3c:	bf e3       	ldi	r27, 0x3F	; 63
    1e3e:	8b 87       	std	Y+11, r24	; 0x0b
    1e40:	9c 87       	std	Y+12, r25	; 0x0c
    1e42:	ad 87       	std	Y+13, r26	; 0x0d
    1e44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	4a e7       	ldi	r20, 0x7A	; 122
    1e54:	55 e4       	ldi	r21, 0x45	; 69
    1e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	8f 83       	std	Y+7, r24	; 0x07
    1e60:	98 87       	std	Y+8, r25	; 0x08
    1e62:	a9 87       	std	Y+9, r26	; 0x09
    1e64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e66:	6f 81       	ldd	r22, Y+7	; 0x07
    1e68:	78 85       	ldd	r23, Y+8	; 0x08
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e8       	ldi	r20, 0x80	; 128
    1e74:	5f e3       	ldi	r21, 0x3F	; 63
    1e76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	2c f4       	brge	.+10     	; 0x1e88 <LCD_Send_Instruction+0x78c>
		__ticks = 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	3f c0       	rjmp	.+126    	; 0x1f06 <LCD_Send_Instruction+0x80a>
	else if (__tmp > 65535)
    1e88:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8a:	78 85       	ldd	r23, Y+8	; 0x08
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	3f ef       	ldi	r19, 0xFF	; 255
    1e94:	4f e7       	ldi	r20, 0x7F	; 127
    1e96:	57 e4       	ldi	r21, 0x47	; 71
    1e98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e9c:	18 16       	cp	r1, r24
    1e9e:	4c f5       	brge	.+82     	; 0x1ef2 <LCD_Send_Instruction+0x7f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
    1ec8:	0f c0       	rjmp	.+30     	; 0x1ee8 <LCD_Send_Instruction+0x7ec>
    1eca:	80 e9       	ldi	r24, 0x90	; 144
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	9c 83       	std	Y+4, r25	; 0x04
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <LCD_Send_Instruction+0x7da>
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	69 f7       	brne	.-38     	; 0x1eca <LCD_Send_Instruction+0x7ce>
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <LCD_Send_Instruction+0x81e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef4:	78 85       	ldd	r23, Y+8	; 0x08
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9e 83       	std	Y+6, r25	; 0x06
    1f04:	8d 83       	std	Y+5, r24	; 0x05
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_Send_Instruction+0x816>
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);
#endif
}
    1f1a:	cd 59       	subi	r28, 0x9D	; 157
    1f1c:	df 4f       	sbci	r29, 0xFF	; 255
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	08 95       	ret

00001f32 <LCD_Clear>:

void LCD_Clear(void)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Instruction(LCD_CLEAR_DISPLAY);
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_Send_Instruction>
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <LCD_RowCol_Select>:

void LCD_RowCol_Select(uint8 Row, uint8 Col)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <LCD_RowCol_Select+0x6>
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <LCD_RowCol_Select+0x8>
    1f4e:	0f 92       	push	r0
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	8a 83       	std	Y+2, r24	; 0x02
    1f56:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8LocalLineAddress = 0U;
    1f58:	19 82       	std	Y+1, r1	; 0x01

	switch(Row)
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	3d 83       	std	Y+5, r19	; 0x05
    1f62:	2c 83       	std	Y+4, r18	; 0x04
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	9d 81       	ldd	r25, Y+5	; 0x05
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	c1 f0       	breq	.+48     	; 0x1f9e <LCD_RowCol_Select+0x58>
    1f6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f70:	3d 81       	ldd	r19, Y+5	; 0x05
    1f72:	22 30       	cpi	r18, 0x02	; 2
    1f74:	31 05       	cpc	r19, r1
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <LCD_RowCol_Select+0x3c>
    1f78:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	61 f0       	breq	.+24     	; 0x1f98 <LCD_RowCol_Select+0x52>
    1f80:	19 c0       	rjmp	.+50     	; 0x1fb4 <LCD_RowCol_Select+0x6e>
    1f82:	2c 81       	ldd	r18, Y+4	; 0x04
    1f84:	3d 81       	ldd	r19, Y+5	; 0x05
    1f86:	22 30       	cpi	r18, 0x02	; 2
    1f88:	31 05       	cpc	r19, r1
    1f8a:	69 f0       	breq	.+26     	; 0x1fa6 <LCD_RowCol_Select+0x60>
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	91 05       	cpc	r25, r1
    1f94:	61 f0       	breq	.+24     	; 0x1fae <LCD_RowCol_Select+0x68>
    1f96:	0e c0       	rjmp	.+28     	; 0x1fb4 <LCD_RowCol_Select+0x6e>
	{
		case 0:
			/* !Comment: When Writing To LCD 1st Col The Base Address is 0x00 */
			u8LocalLineAddress = Col | LCD_1ST_LINE_BASE;
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	0b c0       	rjmp	.+22     	; 0x1fb4 <LCD_RowCol_Select+0x6e>
			break;
		case 1:
			/* !Comment: When Writing To LCD 2nd Col The Base Address is 0x40 */
			u8LocalLineAddress = Col | LCD_2ND_LINE_BASE;
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	80 64       	ori	r24, 0x40	; 64
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	07 c0       	rjmp	.+14     	; 0x1fb4 <LCD_RowCol_Select+0x6e>
			break;
		case 2:
			/* !Comment: When Writing To LCD 1st Col The Base Address is 0x10 */
			u8LocalLineAddress = Col | LCD_3RD_LINE_BASE;
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	80 61       	ori	r24, 0x10	; 16
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	03 c0       	rjmp	.+6      	; 0x1fb4 <LCD_RowCol_Select+0x6e>
			break;
		case 3:
			/* !Comment: When Writing To LCD 1st Col The Base Address is 0x50 */
			u8LocalLineAddress = Col | LCD_4TH_LINE_BASE;
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	80 65       	ori	r24, 0x50	; 80
    1fb2:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}
	LCD_Send_Instruction(LCD_DDRAM_CONST | u8LocalLineAddress);
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	80 68       	ori	r24, 0x80	; 128
    1fb8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_Send_Instruction>
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <LCD_CharDisplay>:
void LCD_CharDisplay(uint8 Data)
{
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	c3 56       	subi	r28, 0x63	; 99
    1fda:	d0 40       	sbci	r29, 0x00	; 0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ed 59       	subi	r30, 0x9D	; 157
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 83       	st	Z, r24
	/* !Comment: RW  Should be 0  and RS should be 1 when Writing Data to LCD */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RS, DIO_HIGH);
    1fee:	88 e3       	ldi	r24, 0x38	; 56
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	61 e0       	ldi	r22, 0x01	; 1
    1ff4:	41 e0       	ldi	r20, 0x01	; 1
    1ff6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RW, DIO_LOW);
    1ffa:	88 e3       	ldi	r24, 0x38	; 56
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	62 e0       	ldi	r22, 0x02	; 2
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    2006:	fe 01       	movw	r30, r28
    2008:	e1 5a       	subi	r30, 0xA1	; 161
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a0 e8       	ldi	r26, 0x80	; 128
    2012:	bf e3       	ldi	r27, 0x3F	; 63
    2014:	80 83       	st	Z, r24
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	a2 83       	std	Z+2, r26	; 0x02
    201a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201c:	8e 01       	movw	r16, r28
    201e:	05 5a       	subi	r16, 0xA5	; 165
    2020:	1f 4f       	sbci	r17, 0xFF	; 255
    2022:	fe 01       	movw	r30, r28
    2024:	e1 5a       	subi	r30, 0xA1	; 161
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a e7       	ldi	r20, 0x7A	; 122
    2036:	55 e4       	ldi	r21, 0x45	; 69
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	f8 01       	movw	r30, r16
    2042:	80 83       	st	Z, r24
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	a2 83       	std	Z+2, r26	; 0x02
    2048:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    204a:	fe 01       	movw	r30, r28
    204c:	e5 5a       	subi	r30, 0xA5	; 165
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	44 f4       	brge	.+16     	; 0x2078 <LCD_CharDisplay+0xac>
		__ticks = 1;
    2068:	fe 01       	movw	r30, r28
    206a:	e7 5a       	subi	r30, 0xA7	; 167
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
    2076:	64 c0       	rjmp	.+200    	; 0x2140 <LCD_CharDisplay+0x174>
	else if (__tmp > 65535)
    2078:	fe 01       	movw	r30, r28
    207a:	e5 5a       	subi	r30, 0xA5	; 165
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	57 e4       	ldi	r21, 0x47	; 71
    208e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2092:	18 16       	cp	r1, r24
    2094:	0c f0       	brlt	.+2      	; 0x2098 <LCD_CharDisplay+0xcc>
    2096:	43 c0       	rjmp	.+134    	; 0x211e <LCD_CharDisplay+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2098:	fe 01       	movw	r30, r28
    209a:	e1 5a       	subi	r30, 0xA1	; 161
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	60 81       	ld	r22, Z
    20a0:	71 81       	ldd	r23, Z+1	; 0x01
    20a2:	82 81       	ldd	r24, Z+2	; 0x02
    20a4:	93 81       	ldd	r25, Z+3	; 0x03
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e2       	ldi	r20, 0x20	; 32
    20ac:	51 e4       	ldi	r21, 0x41	; 65
    20ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	8e 01       	movw	r16, r28
    20b8:	07 5a       	subi	r16, 0xA7	; 167
    20ba:	1f 4f       	sbci	r17, 0xFF	; 255
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	f8 01       	movw	r30, r16
    20ca:	91 83       	std	Z+1, r25	; 0x01
    20cc:	80 83       	st	Z, r24
    20ce:	1f c0       	rjmp	.+62     	; 0x210e <LCD_CharDisplay+0x142>
    20d0:	fe 01       	movw	r30, r28
    20d2:	e9 5a       	subi	r30, 0xA9	; 169
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 e9       	ldi	r24, 0x90	; 144
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	80 83       	st	Z, r24
    20de:	fe 01       	movw	r30, r28
    20e0:	e9 5a       	subi	r30, 0xA9	; 169
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <LCD_CharDisplay+0x11c>
    20ec:	fe 01       	movw	r30, r28
    20ee:	e9 5a       	subi	r30, 0xA9	; 169
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	de 01       	movw	r26, r28
    20f8:	a7 5a       	subi	r26, 0xA7	; 167
    20fa:	bf 4f       	sbci	r27, 0xFF	; 255
    20fc:	fe 01       	movw	r30, r28
    20fe:	e7 5a       	subi	r30, 0xA7	; 167
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	91 81       	ldd	r25, Z+1	; 0x01
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	11 96       	adiw	r26, 0x01	; 1
    210a:	9c 93       	st	X, r25
    210c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210e:	fe 01       	movw	r30, r28
    2110:	e7 5a       	subi	r30, 0xA7	; 167
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	d1 f6       	brne	.-76     	; 0x20d0 <LCD_CharDisplay+0x104>
    211c:	27 c0       	rjmp	.+78     	; 0x216c <LCD_CharDisplay+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211e:	8e 01       	movw	r16, r28
    2120:	07 5a       	subi	r16, 0xA7	; 167
    2122:	1f 4f       	sbci	r17, 0xFF	; 255
    2124:	fe 01       	movw	r30, r28
    2126:	e5 5a       	subi	r30, 0xA5	; 165
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	f8 01       	movw	r30, r16
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
    2140:	de 01       	movw	r26, r28
    2142:	ab 5a       	subi	r26, 0xAB	; 171
    2144:	bf 4f       	sbci	r27, 0xFF	; 255
    2146:	fe 01       	movw	r30, r28
    2148:	e7 5a       	subi	r30, 0xA7	; 167
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	8d 93       	st	X+, r24
    2152:	9c 93       	st	X, r25
    2154:	fe 01       	movw	r30, r28
    2156:	eb 5a       	subi	r30, 0xAB	; 171
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 81       	ld	r24, Z
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_CharDisplay+0x192>
    2162:	fe 01       	movw	r30, r28
    2164:	eb 5a       	subi	r30, 0xAB	; 171
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
	/* !Comment: Delay of Address Set 60ns minimum */
	_delay_ms(1);
	/* !Comment: Enable LCD E=1 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
    216c:	88 e3       	ldi	r24, 0x38	; 56
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	63 e0       	ldi	r22, 0x03	; 3
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    2178:	fe 01       	movw	r30, r28
    217a:	ef 5a       	subi	r30, 0xAF	; 175
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	a0 e8       	ldi	r26, 0x80	; 128
    2184:	bf e3       	ldi	r27, 0x3F	; 63
    2186:	80 83       	st	Z, r24
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	a2 83       	std	Z+2, r26	; 0x02
    218c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218e:	8e 01       	movw	r16, r28
    2190:	03 5b       	subi	r16, 0xB3	; 179
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	fe 01       	movw	r30, r28
    2196:	ef 5a       	subi	r30, 0xAF	; 175
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a e7       	ldi	r20, 0x7A	; 122
    21a8:	55 e4       	ldi	r21, 0x45	; 69
    21aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	f8 01       	movw	r30, r16
    21b4:	80 83       	st	Z, r24
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	a2 83       	std	Z+2, r26	; 0x02
    21ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21bc:	fe 01       	movw	r30, r28
    21be:	e3 5b       	subi	r30, 0xB3	; 179
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	60 81       	ld	r22, Z
    21c4:	71 81       	ldd	r23, Z+1	; 0x01
    21c6:	82 81       	ldd	r24, Z+2	; 0x02
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e8       	ldi	r20, 0x80	; 128
    21d0:	5f e3       	ldi	r21, 0x3F	; 63
    21d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21d6:	88 23       	and	r24, r24
    21d8:	44 f4       	brge	.+16     	; 0x21ea <LCD_CharDisplay+0x21e>
		__ticks = 1;
    21da:	fe 01       	movw	r30, r28
    21dc:	e5 5b       	subi	r30, 0xB5	; 181
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
    21e8:	64 c0       	rjmp	.+200    	; 0x22b2 <LCD_CharDisplay+0x2e6>
	else if (__tmp > 65535)
    21ea:	fe 01       	movw	r30, r28
    21ec:	e3 5b       	subi	r30, 0xB3	; 179
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	60 81       	ld	r22, Z
    21f2:	71 81       	ldd	r23, Z+1	; 0x01
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	57 e4       	ldi	r21, 0x47	; 71
    2200:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2204:	18 16       	cp	r1, r24
    2206:	0c f0       	brlt	.+2      	; 0x220a <LCD_CharDisplay+0x23e>
    2208:	43 c0       	rjmp	.+134    	; 0x2290 <LCD_CharDisplay+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220a:	fe 01       	movw	r30, r28
    220c:	ef 5a       	subi	r30, 0xAF	; 175
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	60 81       	ld	r22, Z
    2212:	71 81       	ldd	r23, Z+1	; 0x01
    2214:	82 81       	ldd	r24, Z+2	; 0x02
    2216:	93 81       	ldd	r25, Z+3	; 0x03
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e2       	ldi	r20, 0x20	; 32
    221e:	51 e4       	ldi	r21, 0x41	; 65
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	8e 01       	movw	r16, r28
    222a:	05 5b       	subi	r16, 0xB5	; 181
    222c:	1f 4f       	sbci	r17, 0xFF	; 255
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	80 83       	st	Z, r24
    2240:	1f c0       	rjmp	.+62     	; 0x2280 <LCD_CharDisplay+0x2b4>
    2242:	fe 01       	movw	r30, r28
    2244:	e7 5b       	subi	r30, 0xB7	; 183
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	80 e9       	ldi	r24, 0x90	; 144
    224a:	91 e0       	ldi	r25, 0x01	; 1
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	80 83       	st	Z, r24
    2250:	fe 01       	movw	r30, r28
    2252:	e7 5b       	subi	r30, 0xB7	; 183
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <LCD_CharDisplay+0x28e>
    225e:	fe 01       	movw	r30, r28
    2260:	e7 5b       	subi	r30, 0xB7	; 183
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2268:	de 01       	movw	r26, r28
    226a:	a5 5b       	subi	r26, 0xB5	; 181
    226c:	bf 4f       	sbci	r27, 0xFF	; 255
    226e:	fe 01       	movw	r30, r28
    2270:	e5 5b       	subi	r30, 0xB5	; 181
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	11 96       	adiw	r26, 0x01	; 1
    227c:	9c 93       	st	X, r25
    227e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2280:	fe 01       	movw	r30, r28
    2282:	e5 5b       	subi	r30, 0xB5	; 181
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 81       	ld	r24, Z
    2288:	91 81       	ldd	r25, Z+1	; 0x01
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	d1 f6       	brne	.-76     	; 0x2242 <LCD_CharDisplay+0x276>
    228e:	27 c0       	rjmp	.+78     	; 0x22de <LCD_CharDisplay+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2290:	8e 01       	movw	r16, r28
    2292:	05 5b       	subi	r16, 0xB5	; 181
    2294:	1f 4f       	sbci	r17, 0xFF	; 255
    2296:	fe 01       	movw	r30, r28
    2298:	e3 5b       	subi	r30, 0xB3	; 179
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	60 81       	ld	r22, Z
    229e:	71 81       	ldd	r23, Z+1	; 0x01
    22a0:	82 81       	ldd	r24, Z+2	; 0x02
    22a2:	93 81       	ldd	r25, Z+3	; 0x03
    22a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	f8 01       	movw	r30, r16
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	80 83       	st	Z, r24
    22b2:	de 01       	movw	r26, r28
    22b4:	a9 5b       	subi	r26, 0xB9	; 185
    22b6:	bf 4f       	sbci	r27, 0xFF	; 255
    22b8:	fe 01       	movw	r30, r28
    22ba:	e5 5b       	subi	r30, 0xB5	; 181
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	8d 93       	st	X+, r24
    22c4:	9c 93       	st	X, r25
    22c6:	fe 01       	movw	r30, r28
    22c8:	e9 5b       	subi	r30, 0xB9	; 185
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	91 81       	ldd	r25, Z+1	; 0x01
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <LCD_CharDisplay+0x304>
    22d4:	fe 01       	movw	r30, r28
    22d6:	e9 5b       	subi	r30, 0xB9	; 185
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	80 83       	st	Z, r24
	_delay_ms(1);
#if LCD_EIGHTBIT_DATA
	Dio_PortWrite(LCD_DATA_OUT_REG, Data);
#else
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
    22de:	ab e3       	ldi	r26, 0x3B	; 59
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	eb e3       	ldi	r30, 0x3B	; 59
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	8f 70       	andi	r24, 0x0F	; 15
    22ea:	8c 93       	st	X, r24
	*LCD_DATA_OUT_REG |= (Data & 0xF0U);
    22ec:	ab e3       	ldi	r26, 0x3B	; 59
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	eb e3       	ldi	r30, 0x3B	; 59
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	90 81       	ld	r25, Z
    22f6:	fe 01       	movw	r30, r28
    22f8:	ed 59       	subi	r30, 0x9D	; 157
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	80 7f       	andi	r24, 0xF0	; 240
    2300:	89 2b       	or	r24, r25
    2302:	8c 93       	st	X, r24
    2304:	fe 01       	movw	r30, r28
    2306:	ed 5b       	subi	r30, 0xBD	; 189
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a0 e8       	ldi	r26, 0x80	; 128
    2310:	bf e3       	ldi	r27, 0x3F	; 63
    2312:	80 83       	st	Z, r24
    2314:	91 83       	std	Z+1, r25	; 0x01
    2316:	a2 83       	std	Z+2, r26	; 0x02
    2318:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231a:	8e 01       	movw	r16, r28
    231c:	01 5c       	subi	r16, 0xC1	; 193
    231e:	1f 4f       	sbci	r17, 0xFF	; 255
    2320:	fe 01       	movw	r30, r28
    2322:	ed 5b       	subi	r30, 0xBD	; 189
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a e7       	ldi	r20, 0x7A	; 122
    2334:	55 e4       	ldi	r21, 0x45	; 69
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	f8 01       	movw	r30, r16
    2340:	80 83       	st	Z, r24
    2342:	91 83       	std	Z+1, r25	; 0x01
    2344:	a2 83       	std	Z+2, r26	; 0x02
    2346:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2348:	fe 01       	movw	r30, r28
    234a:	ff 96       	adiw	r30, 0x3f	; 63
    234c:	60 81       	ld	r22, Z
    234e:	71 81       	ldd	r23, Z+1	; 0x01
    2350:	82 81       	ldd	r24, Z+2	; 0x02
    2352:	93 81       	ldd	r25, Z+3	; 0x03
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e8       	ldi	r20, 0x80	; 128
    235a:	5f e3       	ldi	r21, 0x3F	; 63
    235c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <LCD_CharDisplay+0x3a2>
		__ticks = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9e af       	std	Y+62, r25	; 0x3e
    236a:	8d af       	std	Y+61, r24	; 0x3d
    236c:	46 c0       	rjmp	.+140    	; 0x23fa <LCD_CharDisplay+0x42e>
	else if (__tmp > 65535)
    236e:	fe 01       	movw	r30, r28
    2370:	ff 96       	adiw	r30, 0x3f	; 63
    2372:	60 81       	ld	r22, Z
    2374:	71 81       	ldd	r23, Z+1	; 0x01
    2376:	82 81       	ldd	r24, Z+2	; 0x02
    2378:	93 81       	ldd	r25, Z+3	; 0x03
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	3f ef       	ldi	r19, 0xFF	; 255
    237e:	4f e7       	ldi	r20, 0x7F	; 127
    2380:	57 e4       	ldi	r21, 0x47	; 71
    2382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2386:	18 16       	cp	r1, r24
    2388:	64 f5       	brge	.+88     	; 0x23e2 <LCD_CharDisplay+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238a:	fe 01       	movw	r30, r28
    238c:	ed 5b       	subi	r30, 0xBD	; 189
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	60 81       	ld	r22, Z
    2392:	71 81       	ldd	r23, Z+1	; 0x01
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e2       	ldi	r20, 0x20	; 32
    239e:	51 e4       	ldi	r21, 0x41	; 65
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	bc 01       	movw	r22, r24
    23aa:	cd 01       	movw	r24, r26
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9e af       	std	Y+62, r25	; 0x3e
    23b6:	8d af       	std	Y+61, r24	; 0x3d
    23b8:	0f c0       	rjmp	.+30     	; 0x23d8 <LCD_CharDisplay+0x40c>
    23ba:	80 e9       	ldi	r24, 0x90	; 144
    23bc:	91 e0       	ldi	r25, 0x01	; 1
    23be:	9c af       	std	Y+60, r25	; 0x3c
    23c0:	8b af       	std	Y+59, r24	; 0x3b
    23c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    23c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <LCD_CharDisplay+0x3fa>
    23ca:	9c af       	std	Y+60, r25	; 0x3c
    23cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	9e af       	std	Y+62, r25	; 0x3e
    23d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    23da:	9e ad       	ldd	r25, Y+62	; 0x3e
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	69 f7       	brne	.-38     	; 0x23ba <LCD_CharDisplay+0x3ee>
    23e0:	16 c0       	rjmp	.+44     	; 0x240e <LCD_CharDisplay+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e2:	fe 01       	movw	r30, r28
    23e4:	ff 96       	adiw	r30, 0x3f	; 63
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	9e af       	std	Y+62, r25	; 0x3e
    23f8:	8d af       	std	Y+61, r24	; 0x3d
    23fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    23fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    23fe:	9a af       	std	Y+58, r25	; 0x3a
    2400:	89 af       	std	Y+57, r24	; 0x39
    2402:	89 ad       	ldd	r24, Y+57	; 0x39
    2404:	9a ad       	ldd	r25, Y+58	; 0x3a
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <LCD_CharDisplay+0x43a>
    240a:	9a af       	std	Y+58, r25	; 0x3a
    240c:	89 af       	std	Y+57, r24	; 0x39
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
    240e:	88 e3       	ldi	r24, 0x38	; 56
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	63 e0       	ldi	r22, 0x03	; 3
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 e8       	ldi	r26, 0x80	; 128
    2420:	bf e3       	ldi	r27, 0x3F	; 63
    2422:	8d ab       	std	Y+53, r24	; 0x35
    2424:	9e ab       	std	Y+54, r25	; 0x36
    2426:	af ab       	std	Y+55, r26	; 0x37
    2428:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242a:	6d a9       	ldd	r22, Y+53	; 0x35
    242c:	7e a9       	ldd	r23, Y+54	; 0x36
    242e:	8f a9       	ldd	r24, Y+55	; 0x37
    2430:	98 ad       	ldd	r25, Y+56	; 0x38
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4a e7       	ldi	r20, 0x7A	; 122
    2438:	55 e4       	ldi	r21, 0x45	; 69
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	89 ab       	std	Y+49, r24	; 0x31
    2444:	9a ab       	std	Y+50, r25	; 0x32
    2446:	ab ab       	std	Y+51, r26	; 0x33
    2448:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    244a:	69 a9       	ldd	r22, Y+49	; 0x31
    244c:	7a a9       	ldd	r23, Y+50	; 0x32
    244e:	8b a9       	ldd	r24, Y+51	; 0x33
    2450:	9c a9       	ldd	r25, Y+52	; 0x34
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <LCD_CharDisplay+0x4a0>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	98 ab       	std	Y+48, r25	; 0x30
    2468:	8f a7       	std	Y+47, r24	; 0x2f
    246a:	3f c0       	rjmp	.+126    	; 0x24ea <LCD_CharDisplay+0x51e>
	else if (__tmp > 65535)
    246c:	69 a9       	ldd	r22, Y+49	; 0x31
    246e:	7a a9       	ldd	r23, Y+50	; 0x32
    2470:	8b a9       	ldd	r24, Y+51	; 0x33
    2472:	9c a9       	ldd	r25, Y+52	; 0x34
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	3f ef       	ldi	r19, 0xFF	; 255
    2478:	4f e7       	ldi	r20, 0x7F	; 127
    247a:	57 e4       	ldi	r21, 0x47	; 71
    247c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2480:	18 16       	cp	r1, r24
    2482:	4c f5       	brge	.+82     	; 0x24d6 <LCD_CharDisplay+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	6d a9       	ldd	r22, Y+53	; 0x35
    2486:	7e a9       	ldd	r23, Y+54	; 0x36
    2488:	8f a9       	ldd	r24, Y+55	; 0x37
    248a:	98 ad       	ldd	r25, Y+56	; 0x38
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e2       	ldi	r20, 0x20	; 32
    2492:	51 e4       	ldi	r21, 0x41	; 65
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	98 ab       	std	Y+48, r25	; 0x30
    24aa:	8f a7       	std	Y+47, r24	; 0x2f
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <LCD_CharDisplay+0x500>
    24ae:	80 e9       	ldi	r24, 0x90	; 144
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	9e a7       	std	Y+46, r25	; 0x2e
    24b4:	8d a7       	std	Y+45, r24	; 0x2d
    24b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCD_CharDisplay+0x4ee>
    24be:	9e a7       	std	Y+46, r25	; 0x2e
    24c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c4:	98 a9       	ldd	r25, Y+48	; 0x30
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	98 ab       	std	Y+48, r25	; 0x30
    24ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ce:	98 a9       	ldd	r25, Y+48	; 0x30
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	69 f7       	brne	.-38     	; 0x24ae <LCD_CharDisplay+0x4e2>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <LCD_CharDisplay+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d6:	69 a9       	ldd	r22, Y+49	; 0x31
    24d8:	7a a9       	ldd	r23, Y+50	; 0x32
    24da:	8b a9       	ldd	r24, Y+51	; 0x33
    24dc:	9c a9       	ldd	r25, Y+52	; 0x34
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	98 ab       	std	Y+48, r25	; 0x30
    24e8:	8f a7       	std	Y+47, r24	; 0x2f
    24ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ec:	98 a9       	ldd	r25, Y+48	; 0x30
    24ee:	9c a7       	std	Y+44, r25	; 0x2c
    24f0:	8b a7       	std	Y+43, r24	; 0x2b
    24f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <LCD_CharDisplay+0x52a>
    24fa:	9c a7       	std	Y+44, r25	; 0x2c
    24fc:	8b a7       	std	Y+43, r24	; 0x2b
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);

	/* !Comment: Enable LCD E=1  (To write the other 4-bit of the instruction)*/
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
    24fe:	88 e3       	ldi	r24, 0x38	; 56
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	63 e0       	ldi	r22, 0x03	; 3
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a0 e8       	ldi	r26, 0x80	; 128
    2510:	bf e3       	ldi	r27, 0x3F	; 63
    2512:	8f a3       	std	Y+39, r24	; 0x27
    2514:	98 a7       	std	Y+40, r25	; 0x28
    2516:	a9 a7       	std	Y+41, r26	; 0x29
    2518:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251a:	6f a1       	ldd	r22, Y+39	; 0x27
    251c:	78 a5       	ldd	r23, Y+40	; 0x28
    251e:	89 a5       	ldd	r24, Y+41	; 0x29
    2520:	9a a5       	ldd	r25, Y+42	; 0x2a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	4a e7       	ldi	r20, 0x7A	; 122
    2528:	55 e4       	ldi	r21, 0x45	; 69
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	8b a3       	std	Y+35, r24	; 0x23
    2534:	9c a3       	std	Y+36, r25	; 0x24
    2536:	ad a3       	std	Y+37, r26	; 0x25
    2538:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    253a:	6b a1       	ldd	r22, Y+35	; 0x23
    253c:	7c a1       	ldd	r23, Y+36	; 0x24
    253e:	8d a1       	ldd	r24, Y+37	; 0x25
    2540:	9e a1       	ldd	r25, Y+38	; 0x26
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e8       	ldi	r20, 0x80	; 128
    2548:	5f e3       	ldi	r21, 0x3F	; 63
    254a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    254e:	88 23       	and	r24, r24
    2550:	2c f4       	brge	.+10     	; 0x255c <LCD_CharDisplay+0x590>
		__ticks = 1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9a a3       	std	Y+34, r25	; 0x22
    2558:	89 a3       	std	Y+33, r24	; 0x21
    255a:	3f c0       	rjmp	.+126    	; 0x25da <LCD_CharDisplay+0x60e>
	else if (__tmp > 65535)
    255c:	6b a1       	ldd	r22, Y+35	; 0x23
    255e:	7c a1       	ldd	r23, Y+36	; 0x24
    2560:	8d a1       	ldd	r24, Y+37	; 0x25
    2562:	9e a1       	ldd	r25, Y+38	; 0x26
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	3f ef       	ldi	r19, 0xFF	; 255
    2568:	4f e7       	ldi	r20, 0x7F	; 127
    256a:	57 e4       	ldi	r21, 0x47	; 71
    256c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2570:	18 16       	cp	r1, r24
    2572:	4c f5       	brge	.+82     	; 0x25c6 <LCD_CharDisplay+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2574:	6f a1       	ldd	r22, Y+39	; 0x27
    2576:	78 a5       	ldd	r23, Y+40	; 0x28
    2578:	89 a5       	ldd	r24, Y+41	; 0x29
    257a:	9a a5       	ldd	r25, Y+42	; 0x2a
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e2       	ldi	r20, 0x20	; 32
    2582:	51 e4       	ldi	r21, 0x41	; 65
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9a a3       	std	Y+34, r25	; 0x22
    259a:	89 a3       	std	Y+33, r24	; 0x21
    259c:	0f c0       	rjmp	.+30     	; 0x25bc <LCD_CharDisplay+0x5f0>
    259e:	80 e9       	ldi	r24, 0x90	; 144
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	98 a3       	std	Y+32, r25	; 0x20
    25a4:	8f 8f       	std	Y+31, r24	; 0x1f
    25a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25a8:	98 a1       	ldd	r25, Y+32	; 0x20
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <LCD_CharDisplay+0x5de>
    25ae:	98 a3       	std	Y+32, r25	; 0x20
    25b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b2:	89 a1       	ldd	r24, Y+33	; 0x21
    25b4:	9a a1       	ldd	r25, Y+34	; 0x22
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	9a a3       	std	Y+34, r25	; 0x22
    25ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25bc:	89 a1       	ldd	r24, Y+33	; 0x21
    25be:	9a a1       	ldd	r25, Y+34	; 0x22
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	69 f7       	brne	.-38     	; 0x259e <LCD_CharDisplay+0x5d2>
    25c4:	14 c0       	rjmp	.+40     	; 0x25ee <LCD_CharDisplay+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c6:	6b a1       	ldd	r22, Y+35	; 0x23
    25c8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ca:	8d a1       	ldd	r24, Y+37	; 0x25
    25cc:	9e a1       	ldd	r25, Y+38	; 0x26
    25ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9a a3       	std	Y+34, r25	; 0x22
    25d8:	89 a3       	std	Y+33, r24	; 0x21
    25da:	89 a1       	ldd	r24, Y+33	; 0x21
    25dc:	9a a1       	ldd	r25, Y+34	; 0x22
    25de:	9e 8f       	std	Y+30, r25	; 0x1e
    25e0:	8d 8f       	std	Y+29, r24	; 0x1d
    25e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <LCD_CharDisplay+0x61a>
    25ea:	9e 8f       	std	Y+30, r25	; 0x1e
    25ec:	8d 8f       	std	Y+29, r24	; 0x1d
	/* !Comment: Delay for processing PW min 450ns */
	_delay_ms(1);
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
    25ee:	ab e3       	ldi	r26, 0x3B	; 59
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	eb e3       	ldi	r30, 0x3B	; 59
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8f 70       	andi	r24, 0x0F	; 15
    25fa:	8c 93       	st	X, r24
	*LCD_DATA_OUT_REG |= ((Data << 4U) & 0xF0U);
    25fc:	ab e3       	ldi	r26, 0x3B	; 59
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	eb e3       	ldi	r30, 0x3B	; 59
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	90 81       	ld	r25, Z
    2606:	fe 01       	movw	r30, r28
    2608:	ed 59       	subi	r30, 0x9D	; 157
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	82 95       	swap	r24
    2610:	80 7f       	andi	r24, 0xF0	; 240
    2612:	89 2b       	or	r24, r25
    2614:	8c 93       	st	X, r24
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a0 e8       	ldi	r26, 0x80	; 128
    261c:	bf e3       	ldi	r27, 0x3F	; 63
    261e:	89 8f       	std	Y+25, r24	; 0x19
    2620:	9a 8f       	std	Y+26, r25	; 0x1a
    2622:	ab 8f       	std	Y+27, r26	; 0x1b
    2624:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2626:	69 8d       	ldd	r22, Y+25	; 0x19
    2628:	7a 8d       	ldd	r23, Y+26	; 0x1a
    262a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a e7       	ldi	r20, 0x7A	; 122
    2634:	55 e4       	ldi	r21, 0x45	; 69
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8d 8b       	std	Y+21, r24	; 0x15
    2640:	9e 8b       	std	Y+22, r25	; 0x16
    2642:	af 8b       	std	Y+23, r26	; 0x17
    2644:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2646:	6d 89       	ldd	r22, Y+21	; 0x15
    2648:	7e 89       	ldd	r23, Y+22	; 0x16
    264a:	8f 89       	ldd	r24, Y+23	; 0x17
    264c:	98 8d       	ldd	r25, Y+24	; 0x18
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	2c f4       	brge	.+10     	; 0x2668 <LCD_CharDisplay+0x69c>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9c 8b       	std	Y+20, r25	; 0x14
    2664:	8b 8b       	std	Y+19, r24	; 0x13
    2666:	3f c0       	rjmp	.+126    	; 0x26e6 <LCD_CharDisplay+0x71a>
	else if (__tmp > 65535)
    2668:	6d 89       	ldd	r22, Y+21	; 0x15
    266a:	7e 89       	ldd	r23, Y+22	; 0x16
    266c:	8f 89       	ldd	r24, Y+23	; 0x17
    266e:	98 8d       	ldd	r25, Y+24	; 0x18
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	3f ef       	ldi	r19, 0xFF	; 255
    2674:	4f e7       	ldi	r20, 0x7F	; 127
    2676:	57 e4       	ldi	r21, 0x47	; 71
    2678:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267c:	18 16       	cp	r1, r24
    267e:	4c f5       	brge	.+82     	; 0x26d2 <LCD_CharDisplay+0x706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	69 8d       	ldd	r22, Y+25	; 0x19
    2682:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2684:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2686:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9c 8b       	std	Y+20, r25	; 0x14
    26a6:	8b 8b       	std	Y+19, r24	; 0x13
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <LCD_CharDisplay+0x6fc>
    26aa:	80 e9       	ldi	r24, 0x90	; 144
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	9a 8b       	std	Y+18, r25	; 0x12
    26b0:	89 8b       	std	Y+17, r24	; 0x11
    26b2:	89 89       	ldd	r24, Y+17	; 0x11
    26b4:	9a 89       	ldd	r25, Y+18	; 0x12
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <LCD_CharDisplay+0x6ea>
    26ba:	9a 8b       	std	Y+18, r25	; 0x12
    26bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8b 89       	ldd	r24, Y+19	; 0x13
    26c0:	9c 89       	ldd	r25, Y+20	; 0x14
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9c 8b       	std	Y+20, r25	; 0x14
    26c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ca:	9c 89       	ldd	r25, Y+20	; 0x14
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <LCD_CharDisplay+0x6de>
    26d0:	14 c0       	rjmp	.+40     	; 0x26fa <LCD_CharDisplay+0x72e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	6d 89       	ldd	r22, Y+21	; 0x15
    26d4:	7e 89       	ldd	r23, Y+22	; 0x16
    26d6:	8f 89       	ldd	r24, Y+23	; 0x17
    26d8:	98 8d       	ldd	r25, Y+24	; 0x18
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9c 8b       	std	Y+20, r25	; 0x14
    26e4:	8b 8b       	std	Y+19, r24	; 0x13
    26e6:	8b 89       	ldd	r24, Y+19	; 0x13
    26e8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ea:	98 8b       	std	Y+16, r25	; 0x10
    26ec:	8f 87       	std	Y+15, r24	; 0x0f
    26ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f0:	98 89       	ldd	r25, Y+16	; 0x10
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <LCD_CharDisplay+0x726>
    26f6:	98 8b       	std	Y+16, r25	; 0x10
    26f8:	8f 87       	std	Y+15, r24	; 0x0f
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
    26fa:	88 e3       	ldi	r24, 0x38	; 56
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	63 e0       	ldi	r22, 0x03	; 3
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	a0 e8       	ldi	r26, 0x80	; 128
    270c:	bf e3       	ldi	r27, 0x3F	; 63
    270e:	8b 87       	std	Y+11, r24	; 0x0b
    2710:	9c 87       	std	Y+12, r25	; 0x0c
    2712:	ad 87       	std	Y+13, r26	; 0x0d
    2714:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2716:	6b 85       	ldd	r22, Y+11	; 0x0b
    2718:	7c 85       	ldd	r23, Y+12	; 0x0c
    271a:	8d 85       	ldd	r24, Y+13	; 0x0d
    271c:	9e 85       	ldd	r25, Y+14	; 0x0e
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	4a e7       	ldi	r20, 0x7A	; 122
    2724:	55 e4       	ldi	r21, 0x45	; 69
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	8f 83       	std	Y+7, r24	; 0x07
    2730:	98 87       	std	Y+8, r25	; 0x08
    2732:	a9 87       	std	Y+9, r26	; 0x09
    2734:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e8       	ldi	r20, 0x80	; 128
    2744:	5f e3       	ldi	r21, 0x3F	; 63
    2746:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    274a:	88 23       	and	r24, r24
    274c:	2c f4       	brge	.+10     	; 0x2758 <LCD_CharDisplay+0x78c>
		__ticks = 1;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	9e 83       	std	Y+6, r25	; 0x06
    2754:	8d 83       	std	Y+5, r24	; 0x05
    2756:	3f c0       	rjmp	.+126    	; 0x27d6 <LCD_CharDisplay+0x80a>
	else if (__tmp > 65535)
    2758:	6f 81       	ldd	r22, Y+7	; 0x07
    275a:	78 85       	ldd	r23, Y+8	; 0x08
    275c:	89 85       	ldd	r24, Y+9	; 0x09
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	3f ef       	ldi	r19, 0xFF	; 255
    2764:	4f e7       	ldi	r20, 0x7F	; 127
    2766:	57 e4       	ldi	r21, 0x47	; 71
    2768:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276c:	18 16       	cp	r1, r24
    276e:	4c f5       	brge	.+82     	; 0x27c2 <LCD_CharDisplay+0x7f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2770:	6b 85       	ldd	r22, Y+11	; 0x0b
    2772:	7c 85       	ldd	r23, Y+12	; 0x0c
    2774:	8d 85       	ldd	r24, Y+13	; 0x0d
    2776:	9e 85       	ldd	r25, Y+14	; 0x0e
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e2       	ldi	r20, 0x20	; 32
    277e:	51 e4       	ldi	r21, 0x41	; 65
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	0f c0       	rjmp	.+30     	; 0x27b8 <LCD_CharDisplay+0x7ec>
    279a:	80 e9       	ldi	r24, 0x90	; 144
    279c:	91 e0       	ldi	r25, 0x01	; 1
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	8b 83       	std	Y+3, r24	; 0x03
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	9c 81       	ldd	r25, Y+4	; 0x04
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <LCD_CharDisplay+0x7da>
    27aa:	9c 83       	std	Y+4, r25	; 0x04
    27ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	69 f7       	brne	.-38     	; 0x279a <LCD_CharDisplay+0x7ce>
    27c0:	14 c0       	rjmp	.+40     	; 0x27ea <LCD_CharDisplay+0x81e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c2:	6f 81       	ldd	r22, Y+7	; 0x07
    27c4:	78 85       	ldd	r23, Y+8	; 0x08
    27c6:	89 85       	ldd	r24, Y+9	; 0x09
    27c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9e 83       	std	Y+6, r25	; 0x06
    27d4:	8d 83       	std	Y+5, r24	; 0x05
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	9a 81       	ldd	r25, Y+2	; 0x02
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <LCD_CharDisplay+0x816>
    27e6:	9a 83       	std	Y+2, r25	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);
#endif
}
    27ea:	cd 59       	subi	r28, 0x9D	; 157
    27ec:	df 4f       	sbci	r29, 0xFF	; 255
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	1f 91       	pop	r17
    27fe:	0f 91       	pop	r16
    2800:	08 95       	ret

00002802 <LCD_StringDisplay>:

void LCD_StringDisplay(char *Str)
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	00 d0       	rcall	.+0      	; 0x2808 <LCD_StringDisplay+0x6>
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	9a 83       	std	Y+2, r25	; 0x02
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	0a c0       	rjmp	.+20     	; 0x2826 <LCD_StringDisplay+0x24>
	while(*Str != '\0')
	{
		LCD_CharDisplay(*Str);
    2812:	e9 81       	ldd	r30, Y+1	; 0x01
    2814:	fa 81       	ldd	r31, Y+2	; 0x02
    2816:	80 81       	ld	r24, Z
    2818:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <LCD_CharDisplay>
		Str++;
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	9a 83       	std	Y+2, r25	; 0x02
    2824:	89 83       	std	Y+1, r24	; 0x01
#endif
}

void LCD_StringDisplay(char *Str)
{
	while(*Str != '\0')
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	80 81       	ld	r24, Z
    282c:	88 23       	and	r24, r24
    282e:	89 f7       	brne	.-30     	; 0x2812 <LCD_StringDisplay+0x10>
	{
		LCD_CharDisplay(*Str);
		Str++;
	}
}
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <LCD_IntegerDisplay>:

void LCD_IntegerDisplay(sint32 Data)
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	65 97       	sbiw	r28, 0x15	; 21
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	6a 8b       	std	Y+18, r22	; 0x12
    2850:	7b 8b       	std	Y+19, r23	; 0x13
    2852:	8c 8b       	std	Y+20, r24	; 0x14
    2854:	9d 8b       	std	Y+21, r25	; 0x15
	/* !Comment: String to hold the ascii result */
	char au8LocalResult[17];
	/* !Comment: 10 for decimal */
	itoa(Data, au8LocalResult, 10);
    2856:	8a 89       	ldd	r24, Y+18	; 0x12
    2858:	9b 89       	ldd	r25, Y+19	; 0x13
    285a:	9e 01       	movw	r18, r28
    285c:	2f 5f       	subi	r18, 0xFF	; 255
    285e:	3f 4f       	sbci	r19, 0xFF	; 255
    2860:	b9 01       	movw	r22, r18
    2862:	4a e0       	ldi	r20, 0x0A	; 10
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	0e 94 54 18 	call	0x30a8	; 0x30a8 <itoa>
	/* !Comment: Display The Result */
	LCD_StringDisplay(au8LocalResult);
    286a:	ce 01       	movw	r24, r28
    286c:	01 96       	adiw	r24, 0x01	; 1
    286e:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_StringDisplay>
}
    2872:	65 96       	adiw	r28, 0x15	; 21
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <Pwm_Init>:
#include "Macros.h"

uint16 gu16TimerTopValue = 0U;

void Pwm_Init(const Pwm_ConfigType *ConfigPtr)
{
    2884:	cf 92       	push	r12
    2886:	df 92       	push	r13
    2888:	ef 92       	push	r14
    288a:	ff 92       	push	r15
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	2a 97       	sbiw	r28, 0x0a	; 10
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigPtr->PwmCh)
    28a8:	e9 81       	ldd	r30, Y+1	; 0x01
    28aa:	fa 81       	ldd	r31, Y+2	; 0x02
    28ac:	80 81       	ld	r24, Z
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	3a 87       	std	Y+10, r19	; 0x0a
    28b4:	29 87       	std	Y+9, r18	; 0x09
    28b6:	89 85       	ldd	r24, Y+9	; 0x09
    28b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	39 f0       	breq	.+14     	; 0x28cc <Pwm_Init+0x48>
    28be:	e9 85       	ldd	r30, Y+9	; 0x09
    28c0:	fa 85       	ldd	r31, Y+10	; 0x0a
    28c2:	e1 30       	cpi	r30, 0x01	; 1
    28c4:	f1 05       	cpc	r31, r1
    28c6:	09 f4       	brne	.+2      	; 0x28ca <Pwm_Init+0x46>
    28c8:	6b c0       	rjmp	.+214    	; 0x29a0 <Pwm_Init+0x11c>
    28ca:	b7 c1       	rjmp	.+878    	; 0x2c3a <Pwm_Init+0x3b6>
	{
		case PWM_CHANNEL_0:
		/* !Comment: Clear Registers before applying configuration */
		*TIMER0_CTRL_REG = 0x00U;
    28cc:	e3 e5       	ldi	r30, 0x53	; 83
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	10 82       	st	Z, r1
		*TIMER0_COUNTER_REG = 0x00U;
    28d2:	e2 e5       	ldi	r30, 0x52	; 82
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	10 82       	st	Z, r1
		/* !Comment: Apply configuration */
		*TIMER0_CTRL_REG |= ConfigPtr->PwmClkDiv | ConfigPtr->PwmMode | ConfigPtr->PwmPolarity;
    28d8:	a3 e5       	ldi	r26, 0x53	; 83
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e3 e5       	ldi	r30, 0x53	; 83
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	20 81       	ld	r18, Z
    28e2:	e9 81       	ldd	r30, Y+1	; 0x01
    28e4:	fa 81       	ldd	r31, Y+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ea:	fa 81       	ldd	r31, Y+2	; 0x02
    28ec:	81 81       	ldd	r24, Z+1	; 0x01
    28ee:	98 2b       	or	r25, r24
    28f0:	e9 81       	ldd	r30, Y+1	; 0x01
    28f2:	fa 81       	ldd	r31, Y+2	; 0x02
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	89 2b       	or	r24, r25
    28f8:	82 2b       	or	r24, r18
    28fa:	8c 93       	st	X, r24
		switch(ConfigPtr->PwmPolarity)
    28fc:	e9 81       	ldd	r30, Y+1	; 0x01
    28fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	38 87       	std	Y+8, r19	; 0x08
    2908:	2f 83       	std	Y+7, r18	; 0x07
    290a:	8f 81       	ldd	r24, Y+7	; 0x07
    290c:	98 85       	ldd	r25, Y+8	; 0x08
    290e:	80 32       	cpi	r24, 0x20	; 32
    2910:	91 05       	cpc	r25, r1
    2912:	41 f1       	breq	.+80     	; 0x2964 <Pwm_Init+0xe0>
    2914:	ef 81       	ldd	r30, Y+7	; 0x07
    2916:	f8 85       	ldd	r31, Y+8	; 0x08
    2918:	e0 33       	cpi	r30, 0x30	; 48
    291a:	f1 05       	cpc	r31, r1
    291c:	09 f0       	breq	.+2      	; 0x2920 <Pwm_Init+0x9c>
    291e:	8d c1       	rjmp	.+794    	; 0x2c3a <Pwm_Init+0x3b6>
		{
			case PWM_HIGH:
			*TIMER0_CMP_REG = (uint8) (((100U - ConfigPtr->PwmDuty) / 100U) * PWM0_RESOLUTION);
    2920:	0c e5       	ldi	r16, 0x5C	; 92
    2922:	10 e0       	ldi	r17, 0x00	; 0
    2924:	e9 81       	ldd	r30, Y+1	; 0x01
    2926:	fa 81       	ldd	r31, Y+2	; 0x02
    2928:	20 85       	ldd	r18, Z+8	; 0x08
    292a:	31 85       	ldd	r19, Z+9	; 0x09
    292c:	84 e6       	ldi	r24, 0x64	; 100
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	82 1b       	sub	r24, r18
    2932:	93 0b       	sbc	r25, r19
    2934:	24 e6       	ldi	r18, 0x64	; 100
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	b9 01       	movw	r22, r18
    293a:	0e 94 09 18 	call	0x3012	; 0x3012 <__udivmodhi4>
    293e:	cb 01       	movw	r24, r22
    2940:	ac 01       	movw	r20, r24
    2942:	ca 01       	movw	r24, r20
    2944:	9c 01       	movw	r18, r24
    2946:	22 0f       	add	r18, r18
    2948:	33 1f       	adc	r19, r19
    294a:	c9 01       	movw	r24, r18
    294c:	96 95       	lsr	r25
    294e:	98 2f       	mov	r25, r24
    2950:	88 27       	eor	r24, r24
    2952:	97 95       	ror	r25
    2954:	87 95       	ror	r24
    2956:	82 1b       	sub	r24, r18
    2958:	93 0b       	sbc	r25, r19
    295a:	84 0f       	add	r24, r20
    295c:	95 1f       	adc	r25, r21
    295e:	f8 01       	movw	r30, r16
    2960:	80 83       	st	Z, r24
    2962:	6b c1       	rjmp	.+726    	; 0x2c3a <Pwm_Init+0x3b6>
			break;
			case PWM_LOW:
			*TIMER0_CMP_REG = (uint8) ((ConfigPtr->PwmDuty / 100U) * PWM0_RESOLUTION);
    2964:	0c e5       	ldi	r16, 0x5C	; 92
    2966:	10 e0       	ldi	r17, 0x00	; 0
    2968:	e9 81       	ldd	r30, Y+1	; 0x01
    296a:	fa 81       	ldd	r31, Y+2	; 0x02
    296c:	80 85       	ldd	r24, Z+8	; 0x08
    296e:	91 85       	ldd	r25, Z+9	; 0x09
    2970:	24 e6       	ldi	r18, 0x64	; 100
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	b9 01       	movw	r22, r18
    2976:	0e 94 09 18 	call	0x3012	; 0x3012 <__udivmodhi4>
    297a:	cb 01       	movw	r24, r22
    297c:	ac 01       	movw	r20, r24
    297e:	ca 01       	movw	r24, r20
    2980:	9c 01       	movw	r18, r24
    2982:	22 0f       	add	r18, r18
    2984:	33 1f       	adc	r19, r19
    2986:	c9 01       	movw	r24, r18
    2988:	96 95       	lsr	r25
    298a:	98 2f       	mov	r25, r24
    298c:	88 27       	eor	r24, r24
    298e:	97 95       	ror	r25
    2990:	87 95       	ror	r24
    2992:	82 1b       	sub	r24, r18
    2994:	93 0b       	sbc	r25, r19
    2996:	84 0f       	add	r24, r20
    2998:	95 1f       	adc	r25, r21
    299a:	f8 01       	movw	r30, r16
    299c:	80 83       	st	Z, r24
    299e:	4d c1       	rjmp	.+666    	; 0x2c3a <Pwm_Init+0x3b6>
			break;
		}
		break;
		case PWM_CHANNEL_1:
		/* !Comment: Clear Registers before applying configuration */
		*TIMER1_CTRL_A_REG = 0x00U;
    29a0:	ef e4       	ldi	r30, 0x4F	; 79
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	10 82       	st	Z, r1
		*TIMER1_CTRL_B_REG = 0x00U;
    29a6:	ee e4       	ldi	r30, 0x4E	; 78
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	10 82       	st	Z, r1
		*(uint16 *)TIMER1_COUNTER_LOW_REG = 0x00U;
    29ac:	ec e4       	ldi	r30, 0x4C	; 76
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	11 82       	std	Z+1, r1	; 0x01
    29b2:	10 82       	st	Z, r1
		/* !Comment: Apply configuration */
		switch(ConfigPtr->PwmMode)
    29b4:	e9 81       	ldd	r30, Y+1	; 0x01
    29b6:	fa 81       	ldd	r31, Y+2	; 0x02
    29b8:	81 81       	ldd	r24, Z+1	; 0x01
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	3e 83       	std	Y+6, r19	; 0x06
    29c0:	2d 83       	std	Y+5, r18	; 0x05
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	9e 81       	ldd	r25, Y+6	; 0x06
    29c6:	80 34       	cpi	r24, 0x40	; 64
    29c8:	91 05       	cpc	r25, r1
    29ca:	11 f1       	breq	.+68     	; 0x2a10 <Pwm_Init+0x18c>
    29cc:	ed 81       	ldd	r30, Y+5	; 0x05
    29ce:	fe 81       	ldd	r31, Y+6	; 0x06
    29d0:	e8 34       	cpi	r30, 0x48	; 72
    29d2:	f1 05       	cpc	r31, r1
    29d4:	c9 f5       	brne	.+114    	; 0x2a48 <Pwm_Init+0x1c4>
		{
			case PWM_MODE_FAST:
			CLEAR_BIT(*TIMER1_CTRL_A_REG, 0U);
    29d6:	af e4       	ldi	r26, 0x4F	; 79
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	ef e4       	ldi	r30, 0x4F	; 79
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	8e 7f       	andi	r24, 0xFE	; 254
    29e2:	8c 93       	st	X, r24
			SET_BIT(*TIMER1_CTRL_A_REG, 1U);
    29e4:	af e4       	ldi	r26, 0x4F	; 79
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	ef e4       	ldi	r30, 0x4F	; 79
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	82 60       	ori	r24, 0x02	; 2
    29f0:	8c 93       	st	X, r24
			SET_BIT(*TIMER1_CTRL_B_REG, 3U);
    29f2:	ae e4       	ldi	r26, 0x4E	; 78
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	ee e4       	ldi	r30, 0x4E	; 78
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	88 60       	ori	r24, 0x08	; 8
    29fe:	8c 93       	st	X, r24
			SET_BIT(*TIMER1_CTRL_B_REG, 4U);
    2a00:	ae e4       	ldi	r26, 0x4E	; 78
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	ee e4       	ldi	r30, 0x4E	; 78
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	80 61       	ori	r24, 0x10	; 16
    2a0c:	8c 93       	st	X, r24
    2a0e:	1c c0       	rjmp	.+56     	; 0x2a48 <Pwm_Init+0x1c4>
			break;
			case PWM_MODE_PHASE_CORRECT:
			SET_BIT(*TIMER1_CTRL_A_REG, 0U);
    2a10:	af e4       	ldi	r26, 0x4F	; 79
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	ef e4       	ldi	r30, 0x4F	; 79
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	81 60       	ori	r24, 0x01	; 1
    2a1c:	8c 93       	st	X, r24
			SET_BIT(*TIMER1_CTRL_A_REG, 1U);
    2a1e:	af e4       	ldi	r26, 0x4F	; 79
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	ef e4       	ldi	r30, 0x4F	; 79
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	82 60       	ori	r24, 0x02	; 2
    2a2a:	8c 93       	st	X, r24
			CLEAR_BIT(*TIMER1_CTRL_B_REG, 3U);
    2a2c:	ae e4       	ldi	r26, 0x4E	; 78
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	ee e4       	ldi	r30, 0x4E	; 78
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	87 7f       	andi	r24, 0xF7	; 247
    2a38:	8c 93       	st	X, r24
			SET_BIT(*TIMER1_CTRL_B_REG, 4U);
    2a3a:	ae e4       	ldi	r26, 0x4E	; 78
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	ee e4       	ldi	r30, 0x4E	; 78
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	80 61       	ori	r24, 0x10	; 16
    2a46:	8c 93       	st	X, r24
			break;
			default:
			break;
		}
		/* !Comment: Set TOP ticks in ICR1 Register */
		gu16TimerTopValue = (uint16)(F_CPU / (ConfigPtr->PrescaleValue * (1000.0 / ConfigPtr->PwmPeriod))) - 1U;
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	86 81       	ldd	r24, Z+6	; 0x06
    2a4e:	97 81       	ldd	r25, Z+7	; 0x07
    2a50:	cc 01       	movw	r24, r24
    2a52:	a0 e0       	ldi	r26, 0x00	; 0
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	bc 01       	movw	r22, r24
    2a58:	cd 01       	movw	r24, r26
    2a5a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a5e:	7b 01       	movw	r14, r22
    2a60:	8c 01       	movw	r16, r24
    2a62:	e9 81       	ldd	r30, Y+1	; 0x01
    2a64:	fa 81       	ldd	r31, Y+2	; 0x02
    2a66:	84 81       	ldd	r24, Z+4	; 0x04
    2a68:	95 81       	ldd	r25, Z+5	; 0x05
    2a6a:	cc 01       	movw	r24, r24
    2a6c:	a0 e0       	ldi	r26, 0x00	; 0
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a78:	9b 01       	movw	r18, r22
    2a7a:	ac 01       	movw	r20, r24
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	8a e7       	ldi	r24, 0x7A	; 122
    2a82:	94 e4       	ldi	r25, 0x44	; 68
    2a84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9c 01       	movw	r18, r24
    2a8e:	ad 01       	movw	r20, r26
    2a90:	c8 01       	movw	r24, r16
    2a92:	b7 01       	movw	r22, r14
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	9c 01       	movw	r18, r24
    2a9e:	ad 01       	movw	r20, r26
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	74 e2       	ldi	r23, 0x24	; 36
    2aa4:	84 e7       	ldi	r24, 0x74	; 116
    2aa6:	9b e4       	ldi	r25, 0x4B	; 75
    2aa8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	bc 01       	movw	r22, r24
    2ab2:	cd 01       	movw	r24, r26
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	90 93 f7 01 	sts	0x01F7, r25
    2ac2:	80 93 f6 01 	sts	0x01F6, r24
		*(uint16*)TIMER1_INP_CAP_LOW_REG = (uint16)gu16TimerTopValue;
    2ac6:	e6 e4       	ldi	r30, 0x46	; 70
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 91 f6 01 	lds	r24, 0x01F6
    2ace:	90 91 f7 01 	lds	r25, 0x01F7
    2ad2:	91 83       	std	Z+1, r25	; 0x01
    2ad4:	80 83       	st	Z, r24

		switch(ConfigPtr->PwmPolarity)
    2ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	28 2f       	mov	r18, r24
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	3c 83       	std	Y+4, r19	; 0x04
    2ae2:	2b 83       	std	Y+3, r18	; 0x03
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	80 32       	cpi	r24, 0x20	; 32
    2aea:	91 05       	cpc	r25, r1
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <Pwm_Init+0x26c>
    2aee:	53 c0       	rjmp	.+166    	; 0x2b96 <Pwm_Init+0x312>
    2af0:	eb 81       	ldd	r30, Y+3	; 0x03
    2af2:	fc 81       	ldd	r31, Y+4	; 0x04
    2af4:	e0 33       	cpi	r30, 0x30	; 48
    2af6:	f1 05       	cpc	r31, r1
    2af8:	09 f0       	breq	.+2      	; 0x2afc <Pwm_Init+0x278>
    2afa:	95 c0       	rjmp	.+298    	; 0x2c26 <Pwm_Init+0x3a2>
		{
			case PWM_HIGH:
			SET_BIT(*TIMER1_CTRL_A_REG, 6U);
    2afc:	af e4       	ldi	r26, 0x4F	; 79
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	ef e4       	ldi	r30, 0x4F	; 79
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	80 64       	ori	r24, 0x40	; 64
    2b08:	8c 93       	st	X, r24
			SET_BIT(*TIMER1_CTRL_A_REG, 7U);
    2b0a:	af e4       	ldi	r26, 0x4F	; 79
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	ef e4       	ldi	r30, 0x4F	; 79
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	80 68       	ori	r24, 0x80	; 128
    2b16:	8c 93       	st	X, r24
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) (((100U - ConfigPtr->PwmDuty) / 100.0) * gu16TimerTopValue);
    2b18:	0f 2e       	mov	r0, r31
    2b1a:	fa e4       	ldi	r31, 0x4A	; 74
    2b1c:	cf 2e       	mov	r12, r31
    2b1e:	dd 24       	eor	r13, r13
    2b20:	f0 2d       	mov	r31, r0
    2b22:	e9 81       	ldd	r30, Y+1	; 0x01
    2b24:	fa 81       	ldd	r31, Y+2	; 0x02
    2b26:	20 85       	ldd	r18, Z+8	; 0x08
    2b28:	31 85       	ldd	r19, Z+9	; 0x09
    2b2a:	84 e6       	ldi	r24, 0x64	; 100
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	82 1b       	sub	r24, r18
    2b30:	93 0b       	sbc	r25, r19
    2b32:	cc 01       	movw	r24, r24
    2b34:	a0 e0       	ldi	r26, 0x00	; 0
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	48 ec       	ldi	r20, 0xC8	; 200
    2b4e:	52 e4       	ldi	r21, 0x42	; 66
    2b50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	7c 01       	movw	r14, r24
    2b5a:	8d 01       	movw	r16, r26
    2b5c:	80 91 f6 01 	lds	r24, 0x01F6
    2b60:	90 91 f7 01 	lds	r25, 0x01F7
    2b64:	cc 01       	movw	r24, r24
    2b66:	a0 e0       	ldi	r26, 0x00	; 0
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b72:	9b 01       	movw	r18, r22
    2b74:	ac 01       	movw	r20, r24
    2b76:	c8 01       	movw	r24, r16
    2b78:	b7 01       	movw	r22, r14
    2b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	f6 01       	movw	r30, r12
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	48 c0       	rjmp	.+144    	; 0x2c26 <Pwm_Init+0x3a2>
			break;
			case PWM_LOW:
			CLEAR_BIT(*TIMER1_CTRL_A_REG, 6U);
    2b96:	af e4       	ldi	r26, 0x4F	; 79
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	ef e4       	ldi	r30, 0x4F	; 79
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	8f 7b       	andi	r24, 0xBF	; 191
    2ba2:	8c 93       	st	X, r24
			SET_BIT(*TIMER1_CTRL_A_REG, 7U);
    2ba4:	af e4       	ldi	r26, 0x4F	; 79
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	ef e4       	ldi	r30, 0x4F	; 79
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	80 68       	ori	r24, 0x80	; 128
    2bb0:	8c 93       	st	X, r24
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) ((ConfigPtr->PwmDuty / 100.0) * gu16TimerTopValue);
    2bb2:	0f 2e       	mov	r0, r31
    2bb4:	fa e4       	ldi	r31, 0x4A	; 74
    2bb6:	cf 2e       	mov	r12, r31
    2bb8:	dd 24       	eor	r13, r13
    2bba:	f0 2d       	mov	r31, r0
    2bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc0:	80 85       	ldd	r24, Z+8	; 0x08
    2bc2:	91 85       	ldd	r25, Z+9	; 0x09
    2bc4:	cc 01       	movw	r24, r24
    2bc6:	a0 e0       	ldi	r26, 0x00	; 0
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	48 ec       	ldi	r20, 0xC8	; 200
    2be0:	52 e4       	ldi	r21, 0x42	; 66
    2be2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	7c 01       	movw	r14, r24
    2bec:	8d 01       	movw	r16, r26
    2bee:	80 91 f6 01 	lds	r24, 0x01F6
    2bf2:	90 91 f7 01 	lds	r25, 0x01F7
    2bf6:	cc 01       	movw	r24, r24
    2bf8:	a0 e0       	ldi	r26, 0x00	; 0
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c04:	9b 01       	movw	r18, r22
    2c06:	ac 01       	movw	r20, r24
    2c08:	c8 01       	movw	r24, r16
    2c0a:	b7 01       	movw	r22, r14
    2c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	f6 01       	movw	r30, r12
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	80 83       	st	Z, r24
			break;
			default:
			break;
		}
		*TIMER1_CTRL_B_REG |= ConfigPtr->PwmClkDiv;
    2c26:	ae e4       	ldi	r26, 0x4E	; 78
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	ee e4       	ldi	r30, 0x4E	; 78
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	90 81       	ld	r25, Z
    2c30:	e9 81       	ldd	r30, Y+1	; 0x01
    2c32:	fa 81       	ldd	r31, Y+2	; 0x02
    2c34:	83 81       	ldd	r24, Z+3	; 0x03
    2c36:	89 2b       	or	r24, r25
    2c38:	8c 93       	st	X, r24
		case PWM_CHANNEL_2:
		break;
		default:
		break;
	}
}
    2c3a:	2a 96       	adiw	r28, 0x0a	; 10
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	ff 90       	pop	r15
    2c50:	ef 90       	pop	r14
    2c52:	df 90       	pop	r13
    2c54:	cf 90       	pop	r12
    2c56:	08 95       	ret

00002c58 <Pwm_SetDutyCycle>:
void Pwm_SetDutyCycle(Pwm_ChannelType ChannelNumber, uint16 DutyCycle)
{
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	29 97       	sbiw	r28, 0x09	; 9
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	7b 83       	std	Y+3, r23	; 0x03
    2c7c:	6a 83       	std	Y+2, r22	; 0x02
	switch(ChannelNumber)
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	28 2f       	mov	r18, r24
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	39 87       	std	Y+9, r19	; 0x09
    2c86:	28 87       	std	Y+8, r18	; 0x08
    2c88:	48 85       	ldd	r20, Y+8	; 0x08
    2c8a:	59 85       	ldd	r21, Y+9	; 0x09
    2c8c:	41 15       	cp	r20, r1
    2c8e:	51 05       	cpc	r21, r1
    2c90:	39 f0       	breq	.+14     	; 0x2ca0 <Pwm_SetDutyCycle+0x48>
    2c92:	88 85       	ldd	r24, Y+8	; 0x08
    2c94:	99 85       	ldd	r25, Y+9	; 0x09
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	91 05       	cpc	r25, r1
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <Pwm_SetDutyCycle+0x46>
    2c9c:	4e c0       	rjmp	.+156    	; 0x2d3a <Pwm_SetDutyCycle+0xe2>
    2c9e:	d6 c0       	rjmp	.+428    	; 0x2e4c <Pwm_SetDutyCycle+0x1f4>
	{
		case PWM_CHANNEL_0:
		switch(gStrPwm_Configuration->PwmPolarity)
    2ca0:	80 91 c7 01 	lds	r24, 0x01C7
    2ca4:	e8 2f       	mov	r30, r24
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	ff 83       	std	Y+7, r31	; 0x07
    2caa:	ee 83       	std	Y+6, r30	; 0x06
    2cac:	2e 81       	ldd	r18, Y+6	; 0x06
    2cae:	3f 81       	ldd	r19, Y+7	; 0x07
    2cb0:	20 32       	cpi	r18, 0x20	; 32
    2cb2:	31 05       	cpc	r19, r1
    2cb4:	39 f1       	breq	.+78     	; 0x2d04 <Pwm_SetDutyCycle+0xac>
    2cb6:	4e 81       	ldd	r20, Y+6	; 0x06
    2cb8:	5f 81       	ldd	r21, Y+7	; 0x07
    2cba:	40 33       	cpi	r20, 0x30	; 48
    2cbc:	51 05       	cpc	r21, r1
    2cbe:	09 f0       	breq	.+2      	; 0x2cc2 <Pwm_SetDutyCycle+0x6a>
    2cc0:	c5 c0       	rjmp	.+394    	; 0x2e4c <Pwm_SetDutyCycle+0x1f4>
		{
			case PWM_HIGH:
			*TIMER0_CMP_REG = (uint8) (((100U - DutyCycle) / 100U) * PWM0_RESOLUTION);
    2cc2:	ec e5       	ldi	r30, 0x5C	; 92
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	24 e6       	ldi	r18, 0x64	; 100
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cce:	a9 01       	movw	r20, r18
    2cd0:	48 1b       	sub	r20, r24
    2cd2:	59 0b       	sbc	r21, r25
    2cd4:	ca 01       	movw	r24, r20
    2cd6:	24 e6       	ldi	r18, 0x64	; 100
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	b9 01       	movw	r22, r18
    2cdc:	0e 94 09 18 	call	0x3012	; 0x3012 <__udivmodhi4>
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	ac 01       	movw	r20, r24
    2ce4:	ca 01       	movw	r24, r20
    2ce6:	9c 01       	movw	r18, r24
    2ce8:	22 0f       	add	r18, r18
    2cea:	33 1f       	adc	r19, r19
    2cec:	c9 01       	movw	r24, r18
    2cee:	96 95       	lsr	r25
    2cf0:	98 2f       	mov	r25, r24
    2cf2:	88 27       	eor	r24, r24
    2cf4:	97 95       	ror	r25
    2cf6:	87 95       	ror	r24
    2cf8:	82 1b       	sub	r24, r18
    2cfa:	93 0b       	sbc	r25, r19
    2cfc:	84 0f       	add	r24, r20
    2cfe:	95 1f       	adc	r25, r21
    2d00:	80 83       	st	Z, r24
    2d02:	a4 c0       	rjmp	.+328    	; 0x2e4c <Pwm_SetDutyCycle+0x1f4>
			break;
			case PWM_LOW:
			*TIMER0_CMP_REG = (uint8) ((DutyCycle / 100U) * PWM0_RESOLUTION);
    2d04:	ec e5       	ldi	r30, 0x5C	; 92
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0c:	24 e6       	ldi	r18, 0x64	; 100
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	b9 01       	movw	r22, r18
    2d12:	0e 94 09 18 	call	0x3012	; 0x3012 <__udivmodhi4>
    2d16:	cb 01       	movw	r24, r22
    2d18:	ac 01       	movw	r20, r24
    2d1a:	ca 01       	movw	r24, r20
    2d1c:	9c 01       	movw	r18, r24
    2d1e:	22 0f       	add	r18, r18
    2d20:	33 1f       	adc	r19, r19
    2d22:	c9 01       	movw	r24, r18
    2d24:	96 95       	lsr	r25
    2d26:	98 2f       	mov	r25, r24
    2d28:	88 27       	eor	r24, r24
    2d2a:	97 95       	ror	r25
    2d2c:	87 95       	ror	r24
    2d2e:	82 1b       	sub	r24, r18
    2d30:	93 0b       	sbc	r25, r19
    2d32:	84 0f       	add	r24, r20
    2d34:	95 1f       	adc	r25, r21
    2d36:	80 83       	st	Z, r24
    2d38:	89 c0       	rjmp	.+274    	; 0x2e4c <Pwm_SetDutyCycle+0x1f4>
			default:
			break;
		}
		break;
		case PWM_CHANNEL_1:
		switch(gStrPwm_Configuration->PwmPolarity)
    2d3a:	80 91 c7 01 	lds	r24, 0x01C7
    2d3e:	e8 2f       	mov	r30, r24
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	fd 83       	std	Y+5, r31	; 0x05
    2d44:	ec 83       	std	Y+4, r30	; 0x04
    2d46:	2c 81       	ldd	r18, Y+4	; 0x04
    2d48:	3d 81       	ldd	r19, Y+5	; 0x05
    2d4a:	20 32       	cpi	r18, 0x20	; 32
    2d4c:	31 05       	cpc	r19, r1
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <Pwm_SetDutyCycle+0xfa>
    2d50:	45 c0       	rjmp	.+138    	; 0x2ddc <Pwm_SetDutyCycle+0x184>
    2d52:	4c 81       	ldd	r20, Y+4	; 0x04
    2d54:	5d 81       	ldd	r21, Y+5	; 0x05
    2d56:	40 33       	cpi	r20, 0x30	; 48
    2d58:	51 05       	cpc	r21, r1
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <Pwm_SetDutyCycle+0x106>
    2d5c:	77 c0       	rjmp	.+238    	; 0x2e4c <Pwm_SetDutyCycle+0x1f4>
		{
			case PWM_HIGH:
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) (((100U - DutyCycle) / 100.0) * gu16TimerTopValue);
    2d5e:	0f 2e       	mov	r0, r31
    2d60:	fa e4       	ldi	r31, 0x4A	; 74
    2d62:	cf 2e       	mov	r12, r31
    2d64:	dd 24       	eor	r13, r13
    2d66:	f0 2d       	mov	r31, r0
    2d68:	24 e6       	ldi	r18, 0x64	; 100
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d70:	f9 01       	movw	r30, r18
    2d72:	e8 1b       	sub	r30, r24
    2d74:	f9 0b       	sbc	r31, r25
    2d76:	cf 01       	movw	r24, r30
    2d78:	cc 01       	movw	r24, r24
    2d7a:	a0 e0       	ldi	r26, 0x00	; 0
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	48 ec       	ldi	r20, 0xC8	; 200
    2d94:	52 e4       	ldi	r21, 0x42	; 66
    2d96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	7c 01       	movw	r14, r24
    2da0:	8d 01       	movw	r16, r26
    2da2:	80 91 f6 01 	lds	r24, 0x01F6
    2da6:	90 91 f7 01 	lds	r25, 0x01F7
    2daa:	cc 01       	movw	r24, r24
    2dac:	a0 e0       	ldi	r26, 0x00	; 0
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2db8:	9b 01       	movw	r18, r22
    2dba:	ac 01       	movw	r20, r24
    2dbc:	c8 01       	movw	r24, r16
    2dbe:	b7 01       	movw	r22, r14
    2dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	f6 01       	movw	r30, r12
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
    2dda:	38 c0       	rjmp	.+112    	; 0x2e4c <Pwm_SetDutyCycle+0x1f4>
			break;
			case PWM_LOW:
			*(uint16 *)TIMER1_CMP_A_LOW_REG = (uint16) ((DutyCycle / 100.0) * gu16TimerTopValue);
    2ddc:	0f 2e       	mov	r0, r31
    2dde:	fa e4       	ldi	r31, 0x4A	; 74
    2de0:	cf 2e       	mov	r12, r31
    2de2:	dd 24       	eor	r13, r13
    2de4:	f0 2d       	mov	r31, r0
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dea:	cc 01       	movw	r24, r24
    2dec:	a0 e0       	ldi	r26, 0x00	; 0
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	48 ec       	ldi	r20, 0xC8	; 200
    2e06:	52 e4       	ldi	r21, 0x42	; 66
    2e08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	7c 01       	movw	r14, r24
    2e12:	8d 01       	movw	r16, r26
    2e14:	80 91 f6 01 	lds	r24, 0x01F6
    2e18:	90 91 f7 01 	lds	r25, 0x01F7
    2e1c:	cc 01       	movw	r24, r24
    2e1e:	a0 e0       	ldi	r26, 0x00	; 0
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	bc 01       	movw	r22, r24
    2e24:	cd 01       	movw	r24, r26
    2e26:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e2a:	9b 01       	movw	r18, r22
    2e2c:	ac 01       	movw	r20, r24
    2e2e:	c8 01       	movw	r24, r16
    2e30:	b7 01       	movw	r22, r14
    2e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	f6 01       	movw	r30, r12
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	80 83       	st	Z, r24
		case PWM_CHANNEL_2:
		break;
		default:
		break;
	}
}
    2e4c:	29 96       	adiw	r28, 0x09	; 9
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	df 90       	pop	r13
    2e66:	cf 90       	pop	r12
    2e68:	08 95       	ret

00002e6a <USART_init>:

#define BAUDRATE 9600
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)


void USART_init(void){
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
	UBRRH = (uint8_t)(BAUD_PRESCALLER>>8);
    2e72:	e0 e4       	ldi	r30, 0x40	; 64
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	10 82       	st	Z, r1
	UBRRL = (uint8_t)(BAUD_PRESCALLER);
    2e78:	e9 e2       	ldi	r30, 0x29	; 41
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	87 e6       	ldi	r24, 0x67	; 103
    2e7e:	80 83       	st	Z, r24
	UCSRB = (1<<RXEN)|(1<<TXEN);
    2e80:	ea e2       	ldi	r30, 0x2A	; 42
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	88 e1       	ldi	r24, 0x18	; 24
    2e86:	80 83       	st	Z, r24
	UCSRC = (1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL);
    2e88:	e0 e4       	ldi	r30, 0x40	; 64
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	86 e8       	ldi	r24, 0x86	; 134
    2e8e:	80 83       	st	Z, r24
}
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <USART_receive>:

/* Function to receive byte/char */
unsigned char USART_receive(void){
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSRA & (1<<RXC)));
    2e9e:	eb e2       	ldi	r30, 0x2B	; 43
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	88 23       	and	r24, r24
    2ea6:	dc f7       	brge	.-10     	; 0x2e9e <USART_receive+0x8>
	return UDR;
    2ea8:	ec e2       	ldi	r30, 0x2C	; 44
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
}
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <USART_send>:
/* Function to send byte/char */
void USART_send( unsigned char data){
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	0f 92       	push	r0
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & (1<<UDRE)));
    2ec0:	eb e2       	ldi	r30, 0x2B	; 43
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	88 2f       	mov	r24, r24
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	80 72       	andi	r24, 0x20	; 32
    2ecc:	90 70       	andi	r25, 0x00	; 0
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	b9 f3       	breq	.-18     	; 0x2ec0 <USART_send+0xc>
	UDR = data;
    2ed2:	ec e2       	ldi	r30, 0x2C	; 44
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	80 83       	st	Z, r24
}
    2eda:	0f 90       	pop	r0
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <USART_putstring>:
/* Send string */
void USART_putstring(char* StringPtr){
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	00 d0       	rcall	.+0      	; 0x2ee8 <USART_putstring+0x6>
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	0a c0       	rjmp	.+20     	; 0x2f06 <USART_putstring+0x24>
	while(*StringPtr != 0x00){
		USART_send(*StringPtr);
    2ef2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef6:	80 81       	ld	r24, Z
    2ef8:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <USART_send>
		StringPtr++;}
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	9a 81       	ldd	r25, Y+2	; 0x02
    2f00:	01 96       	adiw	r24, 0x01	; 1
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & (1<<UDRE)));
	UDR = data;
}
/* Send string */
void USART_putstring(char* StringPtr){
	while(*StringPtr != 0x00){
    2f06:	e9 81       	ldd	r30, Y+1	; 0x01
    2f08:	fa 81       	ldd	r31, Y+2	; 0x02
    2f0a:	80 81       	ld	r24, Z
    2f0c:	88 23       	and	r24, r24
    2f0e:	89 f7       	brne	.-30     	; 0x2ef2 <USART_putstring+0x10>
		USART_send(*StringPtr);
		StringPtr++;}

}
    2f10:	0f 90       	pop	r0
    2f12:	0f 90       	pop	r0
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <main>:



int main(void)
{
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	0f 92       	push	r0
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
	uint8 ReceivedData;

	DcMotorR_Init();
    2f24:	0e 94 17 07 	call	0xe2e	; 0xe2e <DcMotorR_Init>
	DcMotorL_Init();
    2f28:	0e 94 92 07 	call	0xf24	; 0xf24 <DcMotorL_Init>
	LCD_Init();
    2f2c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <LCD_Init>
	USART_init();
    2f30:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <USART_init>


	while (1)
	{
		ReceivedData = USART_receive();
    2f34:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <USART_receive>
    2f38:	89 83       	std	Y+1, r24	; 0x01
		if(ReceivedData == 'l')
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	8c 36       	cpi	r24, 0x6C	; 108
    2f3e:	61 f4       	brne	.+24     	; 0x2f58 <main+0x3e>
		{

			LCD_Clear();
    2f40:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_Clear>
			LCD_RowCol_Select(0,0);
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_RowCol_Select>
			LCD_StringDisplay("Turning Left");
    2f4c:	8f e7       	ldi	r24, 0x7F	; 127
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_StringDisplay>
			Left();
    2f54:	0e 94 3f 08 	call	0x107e	; 0x107e <Left>


		}
		if (ReceivedData == 'r')
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	82 37       	cpi	r24, 0x72	; 114
    2f5c:	61 f4       	brne	.+24     	; 0x2f76 <main+0x5c>
		{
			LCD_Clear();
    2f5e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_Clear>
			LCD_RowCol_Select(0,0);
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_RowCol_Select>
			LCD_StringDisplay("Turning Right");
    2f6a:	8c e8       	ldi	r24, 0x8C	; 140
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_StringDisplay>
			Right();
    2f72:	0e 94 4e 08 	call	0x109c	; 0x109c <Right>
		}
		if (ReceivedData == 'f')
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	86 36       	cpi	r24, 0x66	; 102
    2f7a:	11 f4       	brne	.+4      	; 0x2f80 <main+0x66>
		{
			Forward();
    2f7c:	0e 94 0d 08 	call	0x101a	; 0x101a <Forward>

		}
		if (ReceivedData == 'b')
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	82 36       	cpi	r24, 0x62	; 98
    2f84:	11 f4       	brne	.+4      	; 0x2f8a <main+0x70>
		{
			Backward();
    2f86:	0e 94 26 08 	call	0x104c	; 0x104c <Backward>
		}
		if (ReceivedData =='D')
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	84 34       	cpi	r24, 0x44	; 68
    2f8e:	79 f4       	brne	.+30     	; 0x2fae <main+0x94>
		{
			LCD_Clear();
    2f90:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_Clear>
			LCD_RowCol_Select(0,0);
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	60 e0       	ldi	r22, 0x00	; 0
    2f98:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_RowCol_Select>
			LCD_StringDisplay("Moving Low");
    2f9c:	8a e9       	ldi	r24, 0x9A	; 154
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_StringDisplay>
			Pwm_SetDutyCycle(PWM_CHANNEL_1,20U);
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	64 e1       	ldi	r22, 0x14	; 20
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Pwm_SetDutyCycle>
		}
		if(ReceivedData =='H')
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	88 34       	cpi	r24, 0x48	; 72
    2fb2:	79 f4       	brne	.+30     	; 0x2fd2 <main+0xb8>
		{
			LCD_Clear();
    2fb4:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_Clear>
			LCD_RowCol_Select(0,0);
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	60 e0       	ldi	r22, 0x00	; 0
    2fbc:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_RowCol_Select>
			LCD_StringDisplay("Moving High");
    2fc0:	85 ea       	ldi	r24, 0xA5	; 165
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_StringDisplay>
			Pwm_SetDutyCycle(PWM_CHANNEL_1,90U);
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	6a e5       	ldi	r22, 0x5A	; 90
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Pwm_SetDutyCycle>
		}
		if(ReceivedData=='s')
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	83 37       	cpi	r24, 0x73	; 115
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <main+0xc0>
    2fd8:	ad cf       	rjmp	.-166    	; 0x2f34 <main+0x1a>
		{
			LCD_Clear();
    2fda:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_Clear>
			LCD_RowCol_Select(0,0);
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	60 e0       	ldi	r22, 0x00	; 0
    2fe2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_RowCol_Select>
			LCD_StringDisplay("Car Stopped");
    2fe6:	81 eb       	ldi	r24, 0xB1	; 177
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_StringDisplay>
			Pwm_SetDutyCycle(PWM_CHANNEL_1,0U);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	70 e0       	ldi	r23, 0x00	; 0
    2ff4:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Pwm_SetDutyCycle>
			//function to stop the car
			Dio_ChannelWrite(DC_MOTOR_R_OUT_REG, DC_MOTOR_R_IN1_PIN, DIO_HIGH);
    2ff8:	85 e3       	ldi	r24, 0x35	; 53
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	65 e0       	ldi	r22, 0x05	; 5
    2ffe:	41 e0       	ldi	r20, 0x01	; 1
    3000:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
			Dio_ChannelWrite(DC_MOTOR_R_OUT_REG, DC_MOTOR_R_IN2_PIN, DIO_LOW);
    3004:	85 e3       	ldi	r24, 0x35	; 53
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	66 e0       	ldi	r22, 0x06	; 6
    300a:	40 e0       	ldi	r20, 0x00	; 0
    300c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Dio_ChannelWrite>
    3010:	91 cf       	rjmp	.-222    	; 0x2f34 <main+0x1a>

00003012 <__udivmodhi4>:
    3012:	aa 1b       	sub	r26, r26
    3014:	bb 1b       	sub	r27, r27
    3016:	51 e1       	ldi	r21, 0x11	; 17
    3018:	07 c0       	rjmp	.+14     	; 0x3028 <__udivmodhi4_ep>

0000301a <__udivmodhi4_loop>:
    301a:	aa 1f       	adc	r26, r26
    301c:	bb 1f       	adc	r27, r27
    301e:	a6 17       	cp	r26, r22
    3020:	b7 07       	cpc	r27, r23
    3022:	10 f0       	brcs	.+4      	; 0x3028 <__udivmodhi4_ep>
    3024:	a6 1b       	sub	r26, r22
    3026:	b7 0b       	sbc	r27, r23

00003028 <__udivmodhi4_ep>:
    3028:	88 1f       	adc	r24, r24
    302a:	99 1f       	adc	r25, r25
    302c:	5a 95       	dec	r21
    302e:	a9 f7       	brne	.-22     	; 0x301a <__udivmodhi4_loop>
    3030:	80 95       	com	r24
    3032:	90 95       	com	r25
    3034:	bc 01       	movw	r22, r24
    3036:	cd 01       	movw	r24, r26
    3038:	08 95       	ret

0000303a <__prologue_saves__>:
    303a:	2f 92       	push	r2
    303c:	3f 92       	push	r3
    303e:	4f 92       	push	r4
    3040:	5f 92       	push	r5
    3042:	6f 92       	push	r6
    3044:	7f 92       	push	r7
    3046:	8f 92       	push	r8
    3048:	9f 92       	push	r9
    304a:	af 92       	push	r10
    304c:	bf 92       	push	r11
    304e:	cf 92       	push	r12
    3050:	df 92       	push	r13
    3052:	ef 92       	push	r14
    3054:	ff 92       	push	r15
    3056:	0f 93       	push	r16
    3058:	1f 93       	push	r17
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	ca 1b       	sub	r28, r26
    3064:	db 0b       	sbc	r29, r27
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	09 94       	ijmp

00003072 <__epilogue_restores__>:
    3072:	2a 88       	ldd	r2, Y+18	; 0x12
    3074:	39 88       	ldd	r3, Y+17	; 0x11
    3076:	48 88       	ldd	r4, Y+16	; 0x10
    3078:	5f 84       	ldd	r5, Y+15	; 0x0f
    307a:	6e 84       	ldd	r6, Y+14	; 0x0e
    307c:	7d 84       	ldd	r7, Y+13	; 0x0d
    307e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3080:	9b 84       	ldd	r9, Y+11	; 0x0b
    3082:	aa 84       	ldd	r10, Y+10	; 0x0a
    3084:	b9 84       	ldd	r11, Y+9	; 0x09
    3086:	c8 84       	ldd	r12, Y+8	; 0x08
    3088:	df 80       	ldd	r13, Y+7	; 0x07
    308a:	ee 80       	ldd	r14, Y+6	; 0x06
    308c:	fd 80       	ldd	r15, Y+5	; 0x05
    308e:	0c 81       	ldd	r16, Y+4	; 0x04
    3090:	1b 81       	ldd	r17, Y+3	; 0x03
    3092:	aa 81       	ldd	r26, Y+2	; 0x02
    3094:	b9 81       	ldd	r27, Y+1	; 0x01
    3096:	ce 0f       	add	r28, r30
    3098:	d1 1d       	adc	r29, r1
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	ed 01       	movw	r28, r26
    30a6:	08 95       	ret

000030a8 <itoa>:
    30a8:	fb 01       	movw	r30, r22
    30aa:	9f 01       	movw	r18, r30
    30ac:	e8 94       	clt
    30ae:	42 30       	cpi	r20, 0x02	; 2
    30b0:	c4 f0       	brlt	.+48     	; 0x30e2 <itoa+0x3a>
    30b2:	45 32       	cpi	r20, 0x25	; 37
    30b4:	b4 f4       	brge	.+44     	; 0x30e2 <itoa+0x3a>
    30b6:	4a 30       	cpi	r20, 0x0A	; 10
    30b8:	29 f4       	brne	.+10     	; 0x30c4 <itoa+0x1c>
    30ba:	97 fb       	bst	r25, 7
    30bc:	1e f4       	brtc	.+6      	; 0x30c4 <itoa+0x1c>
    30be:	90 95       	com	r25
    30c0:	81 95       	neg	r24
    30c2:	9f 4f       	sbci	r25, 0xFF	; 255
    30c4:	64 2f       	mov	r22, r20
    30c6:	77 27       	eor	r23, r23
    30c8:	0e 94 09 18 	call	0x3012	; 0x3012 <__udivmodhi4>
    30cc:	80 5d       	subi	r24, 0xD0	; 208
    30ce:	8a 33       	cpi	r24, 0x3A	; 58
    30d0:	0c f0       	brlt	.+2      	; 0x30d4 <itoa+0x2c>
    30d2:	89 5d       	subi	r24, 0xD9	; 217
    30d4:	81 93       	st	Z+, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	00 97       	sbiw	r24, 0x00	; 0
    30da:	a1 f7       	brne	.-24     	; 0x30c4 <itoa+0x1c>
    30dc:	16 f4       	brtc	.+4      	; 0x30e2 <itoa+0x3a>
    30de:	5d e2       	ldi	r21, 0x2D	; 45
    30e0:	51 93       	st	Z+, r21
    30e2:	10 82       	st	Z, r1
    30e4:	c9 01       	movw	r24, r18
    30e6:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <strrev>

000030ea <strrev>:
    30ea:	dc 01       	movw	r26, r24
    30ec:	fc 01       	movw	r30, r24
    30ee:	67 2f       	mov	r22, r23
    30f0:	71 91       	ld	r23, Z+
    30f2:	77 23       	and	r23, r23
    30f4:	e1 f7       	brne	.-8      	; 0x30ee <strrev+0x4>
    30f6:	32 97       	sbiw	r30, 0x02	; 2
    30f8:	04 c0       	rjmp	.+8      	; 0x3102 <strrev+0x18>
    30fa:	7c 91       	ld	r23, X
    30fc:	6d 93       	st	X+, r22
    30fe:	70 83       	st	Z, r23
    3100:	62 91       	ld	r22, -Z
    3102:	ae 17       	cp	r26, r30
    3104:	bf 07       	cpc	r27, r31
    3106:	c8 f3       	brcs	.-14     	; 0x30fa <strrev+0x10>
    3108:	08 95       	ret

0000310a <_exit>:
    310a:	f8 94       	cli

0000310c <__stop_program>:
    310c:	ff cf       	rjmp	.-2      	; 0x310c <__stop_program>
